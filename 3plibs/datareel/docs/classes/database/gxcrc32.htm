<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Vbcrc32</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">32-Bit CRC Functions</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The CRC32 (Cyclic Redundancy Check) functions are used to calculate a sophisticated checksum based on the algebra of polynomials. The Cyclic Redundancy Check, is a way to detect bit errors that occur during data storage or transmission. The CRC-32 algorithm operates on a block of data as a single large numerical value. The algorithm divides this large value by the CRC-32 polynomial or generator polynomial, leaving the remainder 32-bit, which is the checksum. </P>
<P>The CRC32 functions use a CRC table to calculate a checksum value for a single byte, a raw pattern of bytes, or a file. The CRC table is an array of all possible single-byte values needed to generate a 32-bit CRC for data one a byte at a time for all combinations of incoming bytes. It is based on the Autodin/Ethernet/ADCCP polynomial of 0x4C11DB7: </P>
<P>0000 0100 1100 0001 0001 1101 1011 0111 (binary) or a poly of x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7 +x^5+x^4+x^2+x^1+x^0 </P>
<P>In this implementation the coefficient of x^0 is stored in the MSB of the 32-bit word and the coefficient of x^31 is stored in the LSB. Thus 0x4C11DB7 becomes 0xEDB88320: </P>
<P>1110 1101 1011 1000 1000 0011 0010 0000 (binary)</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<B><FONT COLOR="#000080"><P>unsigned long calcCRC32(const char *buf, unsigned len) </B></FONT>- Calculates a 32-bit CRC for a raw pattern of bytes. Returns a 32-bit checksum.</P>
<B><FONT COLOR="#000080"><P>unsigned long calcCRC32(unsigned char c, unsigned long CRC) </B></FONT>- Calculates a 32-bit CRC table value for a single byte. <B>NOTE:</B> The initial CRC value must be set to 0xffffffffL and the final 32-bit value that must be XOR'ed with 0xffffffffL to obtain the checksum.</P>
<B><FONT COLOR="#000080"><P>unsigned long calcCRC32(fstream &amp;infile) </B></FONT>- Calculates a 32-bit CRC for a file. Assumes the stream is already open. Returns a 32-bit checksum.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>

</BODY>
</HTML>
