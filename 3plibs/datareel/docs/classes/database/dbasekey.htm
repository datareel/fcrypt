<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>DBASEKEY </TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Database Key Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="gxdbase.htm#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="gxheader.htm#Constants">Constants</A><BR>
<A HREF="gxbtree.htm#TypeDefinitions">Type Definitions</A><BR>
<A HREF="gxheader.htm#Enumerations">Enumerations</A> <BR>
<A HREF="#DataMemebers">Data Members</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The DatabaseKeyB base class is an abstract base class used to define database key types and the methods by which database keys are sorted. Database keys are used by the B-tree class for searching and sorting structured data and indexing associated objects or records stored in a data file. </P>
<P>In this implementation all database keys must be derived from the abstract DatabaseKeyB base class. The DatabaseKeyB class operates independently of actual key type allowing it to work with any type of data. The derived class is responsible for defining key comparison methods thus enabling you to define how the keys are sorted in the B-tree.</P>
<P><HR></P>
<P><A NAME="DataMemebers"><!-- New Section --><B><FONT SIZE=4>Public Data Members</A></P>
</FONT><FONT COLOR="#000080"><P>FAU DatabaseKeyB::right_child</B></FONT> - File pointer to the right child.</P>
<B><FONT COLOR="#000080"><P>void *DatabaseKeyB::db_key</B></FONT> - Memory pointer to the database key.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#DatabaseKeyB">DatabaseKeyB::DatabaseKeyB()</A><BR>
<A HREF="#DatabaseKeyBDestructor">DatabaseKeyB::~DatabaseKeyB()</A><BR>
<A HREF="#KeySize">DatabaseKeyB::KeySize()</A><BR>
<A HREF="#SizeOfDatabaseKey">DatabaseKeyB::SizeOfDatabaseKey()</A><BR>
<A HREF="#OperatorEquals">DatabaseKeyB::operator==()</A><BR>
<A HREF="#OperatorGreaterThen">DatabaseKeyB::operator&gt;()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="DatabaseKeyB">DatabaseKeyB::DatabaseKeyB(void *kptr)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to construct a DatabaseKeyB object and initialize the database key pointer variable.</P>
<B><FONT COLOR="#000080"><P><A NAME="DatabaseKeyB_overload_1">DatabaseKeyB::DatabaseKeyB(const DatabaseKeyB &amp;ob)</A></B></FONT>&nbsp;-&nbsp;Protected member copy constructor. Copying is only permitted in the derived class.</P>
<B><FONT COLOR="#000080"><P><A NAME="operator_">DatabaseKeyB&amp; DatabaseKeyB::operator=(const DatabaseKeyB &amp;ob)</A></B></FONT>&nbsp;-&nbsp;Protected member <A NAME="BM_DatabaseKeyB">assignment operator. Assignment is only permitted in the derived class.</P>
<B><FONT COLOR="#000080"><P><A NAME="DatabaseKeyBDestructor">virtual DatabaseKeyB::~DatabaseKeyB()</A></A></B></FONT>&nbsp;-&nbsp;Virtual class destructor that does not perform any operations. The derived class is responsible for de-allocating memory allocated for database key.</P>
<B><FONT COLOR="#000080"><P><A NAME="KeySize">virtual size_t DatabaseKeyB::KeySize()</A></B></FONT>&nbsp;-&nbsp;Pure virtual function overridden in the derived class to return the database key size. The key size must equal the size of the data pointed to by the "DatabaseKeyB::db_key" pointer<A NAME="SizeOfDatabaseKey">.</P>
<B><FONT COLOR="#000080"><P>size_t DatabaseKeyB::SizeOfDatabaseKey()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the total size of the database key which is equal to: DatabaseKeyB::KeySize()&nbsp;+ sizeof(right_child).</P>
<B><FONT COLOR="#000080"><P><A NAME="OperatorEquals">virtual int DatabaseKeyB::operator==(const DatabaseKeyB&amp; key) const = 0</B></FONT>&nbsp;</A>-&nbsp;Pure virtual function overridden in the derived class to compare database keys. Must return true if this key is equal to the specified key or false if the keys are not equal. </P>
<B><FONT COLOR="#000080"><P><A NAME="OperatorGreaterThen">virtual int operator&amp;DatabaseKeyB::&gt;(const DatabaseKeyB&amp; key)</A> const = 0</B></FONT>&nbsp;-&nbsp;Pure virtual function overridden in the derived class to compare database keys. Must return true if this key is greater then the specified key or false if this key is less then or equal to the specified key.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>

</BODY>
</HTML>
