<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Database File System API </TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Database File System API</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="#LargeFileSupport">64-Bit Support</A> <BR>
<A HREF="#Structs">Data Structures</A> <BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The database file system API is a collection of data structures and standalone functions used to define the underlying file system used by the gxDatabase class. By separating the file system API calls from the database engine you can change the underlying file system without modifying the gxDatabase class. This is design allows you to support multiple files systems using a single interface and is usually utilized to support large files and proprietary file systems.</P>
<B><P>NOTE</B>: None of the data structures and functions documented here are intended to be used directly. They are used internally by the gxDatabase class to call the correct native file API function for each supported platform/compiler.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="ConditionalDirectives"><B><FONT SIZE=4>Conditional Directives</A></B></FONT> </P>
<B><P>__64_BIT_DATABASE_ENGINE__</B> - Directive used to enable 64-bit file offsets. <B>NOTE</B>: This directive also requires a platform/compiler specific 64-bit integer directive: </P>
<B><P>__WIN32__</B> - Directive used to enable 64-bit integer support on all WIN32 platforms.</P>
<B><P>__MSVC__</B> - Directive used to enable 64-bit integer support using MSVC version 4.2 and higher.</P>
<B><P>__UNIX__</B> - Directive used to enable 64-bit integer support on all UNIX platforms.</P>
<B><P>_LARGEFILE64_SOURCE</B> - Directive used on all UNIX platforms to enable large file support.</P>
<B><P>__LINUX__</B> - Directive used to enable 64-bit integer support on all Linux platforms.</P>
<B><P>__HPUX__</B> - Directive used to enable 64-bit integer support on all HPUX platforms.</P>
<B><P>__SOLARIS__</B> - Directive used to enable 64-bit integer support on all Solaris platforms.</P>
<B><P>__BCC32__</B> - Directive used to enable 64-bit integer support using BCC32 5.5. <B>NOTE</B>: At the time of this publication large file support has not been implemented under BCC 5.5, although the use of 64-bit integers is supported.</P>
<P><HR></P>
<P><A NAME="LargeFileSupport"><!-- New Section --><B><FONT SIZE=4>64-Bit Support</A></P>
</B></FONT><P>Currently 64-bit support is limited to Windows NT, RedHat 6.2/7.2, HPUX 11.0 and Solaris 2.8 platforms, with HPUX 11.0 supporting a maximum single file size of 128 GB. As large file support and 64-bit operating systems become more prevalent support will be included for all the platforms supported by the 32-bit database engine. </P>
<P>The 64-bit UNIX API is based on the non-POSIX standard UNIX API interfaces to support large files:</P>
<PRE>::fopen64()
::fseeko64()
::ftello64()
::stat64()</PRE>
<B><P>NOTE</B>: Since these functions are not part of the POSIX standard they may be removed in future compiler versions.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Structs"><B><FONT SIZE=4>Data Structures</A></B></FONT> </P>
<B><P>gxdFPTR</B> - The gxdFPTR data structure defines the file pointer type used by the underlying file system.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<B><FONT COLOR="#000080"><P>gxdFPTR *gxdFPTRCreate(const char *fname) </B></FONT>- Create a new file and truncate existing files. Returns a null value if the file cannot be created.</P>
<B><FONT COLOR="#000080"><P>gxdFPTR *gxdFPTROpen(const char *fname, gxDatabaseAccessMode mode)</B></FONT> - Open an existing file. The mode" variable determines if the file is opened for read only or read/write access. Returns a null value if the specified file cannot be opened. <B>NOTE</B>: This version of the open functions will only accept: gxDBASE_READONLY and fxDBASE_READWRITE access modes.</P>
<B><FONT COLOR="#000080"><P>int gxdFPTRClose(gxdFPTR *stream)</B></FONT> - Close an open file. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P>int gxdFPTRFlush(gxdFPTR *stream)</B></FONT> - Flush the any open disk buffers. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P>int gxdFPTRRead(gxdFPTR *stream, void *buf, __UWORD__ bytes)</B></FONT> - Read a specified number of bytes from the current file position into a memory buffer. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P>int gxdFPTRWrite(gxdFPTR *stream, const void *buf, __UWORD__ bytes)</B></FONT> - Write a specific number of bytes from a memory buffer to the current file position. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P>FAU_t gxdFPTRSeek(gxdFPTR *stream, FAU_t, gxDatabaseSeekMode mode)</B></FONT> - Seek to the specified offset starting at the beginning (<B>gxDBASE_ SEEK_SET</B>), end (<B>gxDBASE_ SEEK_END</B>) or current offset (<B>gxDBASE_ SEEK_CUR</B>). Returns a -1 to indicate an error condition or the current file position if successful.</P>
<B><FONT COLOR="#000080"><P>FAU_t gxdFPTRTell(gxdFPTR *stream)</B></FONT> - Returns the current file position or -1 if an error occurs. </P>
<B><FONT COLOR="#000080"><P>int gxdFPTRExists(const char *fname)</B></FONT> - Returns true if the specified file exists.</P>
<B><FONT COLOR="#000080"><P>FAU_t gxdFPTRFileSize(const char *fname)</B></FONT> - Returns the length of the specified file or -1 to indicate an error condition.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>

</BODY>
</HTML>
