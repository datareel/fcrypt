<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>String Utilities </TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">String Utilities</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="#Constants">Constants</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The string utilities are a collection of data structures and standalone functions used to manipulate and parse null terminated character strings.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="ConditionalDirectives"><B><FONT SIZE=4>Conditional Directives</A></B></FONT> </P>
<P>The following conditional directives are used to define non-portable string routines that need to be ported between UNIX and WIN32 platforms.</P>
<B><P>__DOS__</B> - Directive used for all DOS compilers </P>
<B><P>__UNIX__</B> - Directive used for all UNIX compilers</P>
<B><P>__WIN32__</B> - Directive used for all WIN32 compilers</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Constants"><B><FONT SIZE=4>Constants</A></B></FONT> </P>
<PRE>const int <B>MAXWORDLENGTH</B> = 255; // Maximum word length
const int <B>MAXWORDS</B> = 255;      // Maximum number of words</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<B><U><P>String concatenation routines</B></U>:<BR>
<B><FONT COLOR="#000080">char *StringCat(const char *s1=" ", const char *s2= " ", const char *s3=" ")</B></FONT> - Standalone function used to append up to three strings onto the end of each other. Returns a null-terminated string representing "s2" and "s3" concatenated onto the end of "s1." The calling function is responsible for freeing the memory allocated for the composite string returned by this functions.</P>
<B><U><P>String parser</B></U>: <BR>
<B><FONT COLOR="#000080">int parse(char *string, char words[MAXWORDS][MAXWORDLENGTH], int *numwords, char sepchar)</B></FONT> - The global integer constants <B>MAXWORDS</B> and <B>MAXWORDLENGTH</B> define the maximum number of words and the maximum word length that will be parsed. Both are equal to 255. The number of words parsed is passed back in the "numwords" variable and the actual words parsed from the line of text are passed back in the "words" array.</P>
<B><U><P>Case insensitive string compare functions</B></U>: <BR>
<B><FONT COLOR="#000080">int CaseICmp(const char *s1, const char *s2)</B></FONT> - Standalone function used to perform a case insensitive string compare. Returns -1 if "s1" is less then "s2", 0 if "s1" equals "s2" and 1 if "s1" is greater then "s2."</P>
<B><U><P>String searching functions</B></U>:<BR>
<B><FONT COLOR="#000080">unsigned FindMatch(const char *str, const char *p, unsigned offset = 0)</B></FONT> - Finds pattern "p" in string "s" starting a specified offset. Returns index of first occurrence of matching the pattern or -1 if no match is found.</P>
<B><FONT COLOR="#000080"><P>unsigned IFindMatch(const char *str, const char *p, unsigned offset = 0)</B></FONT> - Finds pattern "p" in string "s" starting a specified offset using a case insensitive compare. Returns index of first occurrence of matching the pattern or -1 if no match is found.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>

</BODY>
</HTML>
