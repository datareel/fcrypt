<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE> Memory Block Class </TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Memory Block Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#Constants">Constants</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The MemoryBlock class is a general-purpose data structure is use by the <A HREF="devcache.htm">Device Cache</A> classes to store data in small fixed length blocks of memory.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="Constants">Constants</A></P>
</B></FONT><PRE>const unsigned <B>MEMORY_BLOCK_SIZE</B> = 1024; // Fixed Block size</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#MemoryBlock">MemoryBlock::MemoryBlock()</A><BR>
<A HREF="#GetDimLen">MemoryBlock::GetDimLen()</A><BR>
<A HREF="#Load">MemoryBlock::Load()</A><BR>
<A HREF="#length">MemoryBlock::length()</A><BR>
<A HREF="#m_buf">MemoryBlock::m_buf()</A><BR>
<A HREF="#resize">MemoryBlock::resize()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="MemoryBlock">MemoryBlock::MemoryBlock()</A></B></FONT>&nbsp;-&nbsp;Public member function used to construct a memory block object and null the memory block.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetDimLen">unsigned MemoryBlock::GetDimLen()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the maximum number of bytes a block can contain.</P>
<B><FONT COLOR="#000080"><P><A NAME="Load">void MemoryBlock::Load(const void *buf, unsigned bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to load data into a buffer. <B>NOTE:</B> The byte size will automatically be truncated if the size of the fixed length block is exceeded.</P>
<B><FONT COLOR="#000080"><P><A NAME="length">unsigned MemoryBlock::length()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the logical length (number of byte actually used) of a memory block.</P>
<B><FONT COLOR="#000080"><P><A NAME="m_buf">char *MemoryBlock::m_buf()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a pointer to the memory block.</P>
<B><FONT COLOR="#000080"><P><A NAME="m_buf_overload_1">const char *MemoryBlock::m_buf()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a pointer to the memory buffer.</P>
<B><FONT COLOR="#000080"><P><A NAME="resize">int MemoryBlock::resize(unsigned bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to resize the logical length of this block. Returns false if the fixed length is exceeded.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>

</BODY>
</HTML>
