<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Exception Handler Class </TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Exception Handler Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="#Constants">Constants</A> <BR>
<A HREF="#Enumerations">Enumerations</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The exception handler class is a general-purpose support class that can be used by applications to display exceptions that occur at run-time. The EHandler class is designed to work with several APIs and is a convenient way to code messaging functions when working with multiple GUI libraries. A global pointer to an EHandler class object, named <B>ProgramError </B>is provided to perform all the necessary messaging operations for the life of the program.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="ConditionalDirectives"><B><FONT SIZE=4>Conditional Directives</A></B></FONT> </P>
<B><P>__wxWIN168B__</B> - Directive used for the wxWindows 1.68B GUI library.</P>
<B><P>__wxWIN201__</B> - Directive used for the wxWindows 2.0.1 and higher GUI library.</P>
<B><P>__CONSOLE__</B> - Directive used for console-based applications.</P>
<B><P>__CURSES__</B> - Directive used for the Curses library.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Constants"><B><FONT SIZE=4>Constants</A></B></FONT> </P>
<PRE>const int <B>FatalErrorLevel</B> = 1; // Return value to the Operating System
</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Enumerations"><B><FONT SIZE=4>Enumerations</A></B></FONT> </P>
<PRE>enum { // Exception Handler error levels
 <B>EHandler::FATAL</B> = 0x0010,  // Fatal error, terminate program immediately
 <B>Ehandler::DISPLAY</B> = 0x0020 // Dummy handler that does nothing
};</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#EHandler">EHandler::EHandler()</A><BR>
<A HREF="#EHandlerDestructor">EHandler::~EHandler()</A><BR>
<A HREF="#DisplayException">EHandler::DisplayException()</A><BR>
<A HREF="#Message">EHandler::Message()</A><BR>
<A HREF="#SignalException">EHandler::SignalException()</A><BR>
<A HREF="#Terminate">EHandler::Terminate()</A><BR>
<A HREF="#TrapException">EHandler::TrapException()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="EHandler">EHandler::EHandler()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="EHandlerDestructor">EHandler::~EHandler()</A></B></FONT>&nbsp;-&nbsp;Class destructor.</P>
<B><FONT COLOR="#000080"><P><A NAME="DisplayException">void EHandler::DisplayException(const char *mesg)</A></B></FONT>&nbsp;-&nbsp;Public member function used to display a error message in to form of a null terminated string. This function is indented to display fatal program errors.</P>
<B><FONT COLOR="#000080"><P><A NAME="Message">void EHandler::Message(const char *mesg1=" ", const char *mesg2=" ", const char *mesg3=" ")</A></B></FONT>&nbsp;-&nbsp;Public member function used to display a series of messages in to form of a null terminated string. This function is indented to display non-fatal errors, program and informational messages.</P>
<B><FONT COLOR="#000080"><P><A NAME="SignalException">void EHandler::SignalException(const char *mesg, int Level = EHandler::DISPLAY)</A></B></FONT>&nbsp;-&nbsp;Public member function used to signal an exception by displaying an error message or by displaying an error message and terminating the program.</P>
<B><FONT COLOR="#000080"><P><A NAME="Terminate">void EHandler::Terminate()</A></B></FONT>&nbsp;-&nbsp;Public member function used terminate the program. The routine used to terminate the program is dependent on the API used. </P>
<B><FONT COLOR="#000080"><P><A NAME="TrapException">void EHandler::TrapException(AF ActionFunction)</A></B></FONT>&nbsp;-&nbsp;Public member function used to handle a user defined routine to trap a program exception. ActionFunction is a function pointer to a function defined within the application:</P>
<PRE>typedef void (*AF)(); // Function pointer for action function</PRE>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>

</BODY>
</HTML>
