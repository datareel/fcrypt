<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE> Output Stream Base Class </TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Output Stream Base Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#Enumerations">Enumerations</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>Output stream base class used by derived classes to output filtered text to an ostream object.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="Enumerations">Enumerations</A></P>
</B></FONT><PRE>// Enumeration used to define character filters when writing strings.
enum <A NAME="ostrFilterMode">ostrFilterMode</A> {
  <B>ostrNO_FILTERING</B> = 0, // Do not filter any characters
  <B>ostrEAT_SPACES</B>,       // Do not print any spaces
  <B>ostrFILTER_EX_ASCII</B>,  // Filter out the extended ASCII character set
  <B>ostrHTLM_FILTER</B>,      // Write text in an HTML format
  <B>ostrLOWERCASE</B>,        // Write all characters in lower case
  <B>ostrUPPERCASE</B>         // Write all characters in upper case
};</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#OutputStreamB">OutputStreamB::OutputStreamB()</A><BR>
<A HREF="#FilterMode">OutputStreamB::FilterMode()</A><BR>
<A HREF="#HTMLFilter">OutputStreamB::HTMLFilter()</A><BR>
<A HREF="#Write">OutputStreamB::Write()</A><BR>
<A HREF="#WriteChar">OutputStreamB::WriteChar()</A><BR>
<A HREF="#WriteString">OutputStreamB::WriteString()</A><BR>
<A HREF="#eat_htm_space">OutputStreamB::eat_htm_space()</A><BR>
<A HREF="#operator_lt">OutputStreamB::operator&lt;&lt;()</A><BR>
<A HREF="#precision">OutputStreamB::precision()</A><BR>
<A HREF="#put_htm_space">OutputStreamB::put_htm_space()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="OutputStreamB">OutputStreamB::OutputStreamB()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="OutputStreamB_overload_1">OutputStreamB::OutputStreamB(ostream &amp;s)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to bind this object to a specified output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="FilterMode">void OutputStreamB::FilterMode(ostrFilterMode m)</A></B></FONT>&nbsp;-&nbsp;Public member function use to set the text filter mode. The "m" variable must correspond to one of the enumerated constants defined in the <A HREF="#ostrFilterMode">ostrFilterMode</A> enumeration.</P>
<B><FONT COLOR="#000080"><P><A NAME="HTMLFilter">void OutputStreamB::HTMLFilter(const unsigned char c)</A></B></FONT>&nbsp;-&nbsp;Public member function used to filter all characters that have special meaning in HTML documents before writing the character to the currently bound output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write">void OutputStreamB::Write(const char c)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a single character to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_1">void OutputStreamB::Write(const unsigned char c)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a single character to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_10">void OutputStreamB::Write(const unsigned long val)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a long value to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_11">void OutputStreamB::Write(unsigned long val)</A></B></FONT>&nbsp;-&nbsp;-&nbsp;Public member function used to write a long value to the output stream. </P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_12">void OutputStreamB::Write(const int val)</A></B></FONT>&nbsp;-&nbsp;-&nbsp;Public member function used to write a integer value to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_13">void OutputStreamB::Write(int val)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a integer value to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_14">void OutputStreamB::Write(const unsigned int val)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a integer value to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_15">void OutputStreamB::Write(unsigned int val)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a integer value to the output stream. </P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_16">void OutputStreamB::Write(double val)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a floating point value to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_17">void OutputStreamB::Write(const double val)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a floating point value to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_18">void OutputStreamB::Write(float val)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a floating point value to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_19">void OutputStreamB::Write(const float val)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a floating point value to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_2">void OutputStreamB::Write(char c)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a single character to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_3">void OutputStreamB::Write(unsigned char c)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a single character to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_4">void OutputStreamB::Write(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a null-terminated string to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_5">void OutputStreamB::Write(char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a null-terminated string to the output stream. </P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_6">void OutputStreamB::Write(const unsigned char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a null-terminated string to the output stream. </P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_7">void OutputStreamB::Write(unsigned char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a null-terminated string to the output stream. </P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_8">void OutputStreamB::Write(const long val)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a long value to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write_overload_9">void OutputStreamB::Write(long val)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a long value to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteChar">virtual void OutputStreamB::WriteChar(const unsigned char c)</A></B></FONT>&nbsp;-&nbsp;Protected member function used to write a single character to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteString">virtual void OutputStreamB::WriteString(const char *s)</A></B></FONT>&nbsp;-&nbsp;Protected member function used to write a null terminated string to the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="eat_htm_space">void OutputStreamB::eat_htm_space()</A></B></FONT>&nbsp;-&nbsp;Public member function used to translate all spaces encountered in an HTML filter as non-breaking.</P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt">ostream &amp;OutputStreamB::operator&lt;&lt;(ostream &amp; (*_f)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows C++ I/O manipulators to be used on OutputStreamB objects. </P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_1">OutputStreamB &amp;OutputStreamB::operator&lt;&lt;( char *s)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a null-terminated string to be inserted into the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_10">const OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(const long val)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a long value to be inserted into the output stream. </P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_11">OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(unsigned long val)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a long value to be inserted into the output stream. </P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_12">const OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(const unsigned long val)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a long value to be inserted into the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_13">OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(int val)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows an integer value to be inserted into the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_14">const OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(const int val)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows an integer value to be inserted into the output stream. </P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_15">OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(unsigned int val)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows an integer value to be inserted into the output stream. </P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_16">const OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(const unsigned int val)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows an integer value to be inserted into the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_17">const OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(const float val)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a floating point value to be inserted into the output stream. </P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_18">OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(float val)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a floating point value to be inserted into the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_19">const OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(const double val)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a floating point value to be inserted into the output stream. </P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_2">OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(const char *s)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a null-terminated string to be inserted into the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_20">OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(double val)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a floating point value to be inserted into the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_3">OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(unsigned char *s)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a null-terminated string to be inserted into the output stream. </P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_4">OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(const unsigned char *s)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a null-terminated string to be inserted into the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_5">OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(char c)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a single character to be inserted into the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_6">const OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(const char c)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a single character to be inserted into the output stream. </P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_7">OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(unsigned char c)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a single character to be inserted into the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_8">const OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(const unsigned char c)</A></B></FONT>&nbsp;Overloaded left shift operator that allows a single character to be inserted into the output stream. </P>
<B><FONT COLOR="#000080"><P><A NAME="operator_lt_overload_9">OutputStreamB &amp;OutputStreamB::operator&lt;&lt;(long val)</A></B></FONT>&nbsp;-&nbsp;Overloaded left shift operator that allows a long value to be inserted into the output stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="precision">void OutputStreamB::precision(int p)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the decimal precision for floating point values. By default a decimal precision of 2 will by used for all floating point values.</P>
<B><FONT COLOR="#000080"><P><A NAME="put_htm_space">void OutputStreamB::put_htm_space()</A></B></FONT>&nbsp;-&nbsp;Public member function used to translate all spaces encountered in an HTML filter as a breaking space.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>

</BODY>
</HTML>
