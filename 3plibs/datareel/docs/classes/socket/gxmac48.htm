<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>MAC48 Data Type </TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">MAC48 Data Type</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="#Constants">Constants</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The gxMAC48 class is used by database applications to represent 48-bit MAC addresses independently of the operating system or hardware platform used. A MAC (Media Access Control) address is a hardware address that uniquely identifies each node of a network. Ethernet hardware addresses are 48 bits, expressed as 12 hexadecimal digits. The first 24 bits of the MAC address consist of a unique vendor code, which should match the vendor of the network interface card.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="ConditionalDirectives"><B><FONT SIZE=4>Conditional Directives</A></B></FONT> </P>
<B><P>__UNIX__</B> - Conditional directive required for all UNIX variants.</P>
<B><P>__WIN32__</B> - Conditional directive required for all WIN32 platforms</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Constants"><B><FONT SIZE=4>Constants</A></B></FONT> </P>
<PRE>const int <B>mac48MaxStrLen</B> = 255; // Maximum MAC48 string length</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxMAC48">gxMAC48::gxMAC48()</A><BR>
<A HREF="#GetByte1">gxMAC48::GetByte1()</A><BR>
<A HREF="#GetByte2">gxMAC48::GetByte2()</A><BR>
<A HREF="#GetByte3">gxMAC48::GetByte3()</A><BR>
<A HREF="#GetByte4">gxMAC48::GetByte4()</A><BR>
<A HREF="#GetByte5">gxMAC48::GetByte5()</A><BR>
<A HREF="#GetByte6">gxMAC48::GetByte6()</A><BR>
<A HREF="#GetVendorCode">gxMAC48::GetVendorCode()</A><BR>
<A HREF="#SetByte1">gxMAC48::SetByte1()</A><BR>
<A HREF="#SetByte2">gxMAC48::SetByte2()</A><BR>
<A HREF="#SetByte3">gxMAC48::SetByte3()</A><BR>
<A HREF="#SetByte4">gxMAC48::SetByte4()</A><BR>
<A HREF="#SetByte5">gxMAC48::SetByte5()</A><BR>
<A HREF="#SetByte6">gxMAC48::SetByte6()</A><BR>
<A HREF="#SetMACAddress">gxMAC48::SetMACAddress()</A><BR>
<A HREF="#SizeOf">gxMAC48::SizeOf()</A><BR>
<A HREF="#c_str">gxMAC48::c_str()</A><BR>
<A NAME="gxMAC48"></P>
<B><U><P>Standalone Helper functions</B></U>:<BR>
<A HREF="#ParseMACVendorEntry">ParseMACVendorEntry()</A><BR>
<A HREF="#FindVendor1">FindVendor()</A> </P>
<B><FONT COLOR="#000080"><P>gxMAC48::gxMAC48(unsigned char b1 = 0, unsigned char b2 = 0, unsigned char b3 = 0,unsigned char b4 = 0, unsigned char b5 = 0, unsigned char b6 = 0)</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="gxMAC48_overload_1">gxMAC48::gxMAC48(char *mac, char delimiter = ':', int tuple = 2)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to construct an object and assign its MAC address based on the null terminated "mac" string. </P>
<B><FONT COLOR="#000080"><P><A NAME="gxMAC48_overload_2">gxMAC48::gxMAC48(const char *mac, char delimiter = ':', int tuple = 2)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to construct an object and assign its MAC address based on the null terminated "mac" string.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxMAC48_overload_3">gxMAC48::gxMAC48(const gxMAC48&amp; ob)</A></B></FONT>&nbsp;-&nbsp;Class copy constructor.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetByte1">gxMAC48&amp; gxMAC48::operator=(const gxMAC48&amp; ob)</B></FONT>&nbsp;-&nbsp;Assignment operator.</P>
<B><FONT COLOR="#000080"><P>unsigned char gxMAC48::GetByte1()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns MAC address byte 1.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetByte2">unsigned char gxMAC48::GetByte2()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns MAC address byte 2. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetByte3">unsigned char gxMAC48::GetByte3()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns MAC address byte 3.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetByte4">unsigned char gxMAC48::GetByte4()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns MAC address byte 4.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetByte5">unsigned char gxMAC48::GetByte5()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns MAC address byte 5.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetByte6">unsigned char gxMAC48::GetByte6()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns MAC address byte 6.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetVendorCode">int gxMAC48::GetVendorCode()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the vendor code portion of the MAC address.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetVendorCode_overload_1">char *gxMAC48::GetVendorCode(char *sbuf)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back the vendor code portion of the MAC address in a null terminated string and redundantly returns the string. NOTE: The calling function must allocate a memory buffer large enough to hold a single MAC48 string.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetByte1">void gxMAC48::SetByte1(unsigned char b = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set MAC address byte 1.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetByte2">void gxMAC48::SetByte2(unsigned char b = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set MAC address byte 2.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetByte3">void gxMAC48::SetByte3(unsigned char b = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set MAC address byte 3</P>
<B><FONT COLOR="#000080"><P><A NAME="SetByte4">void gxMAC48::SetByte4(unsigned char b = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set MAC address byte 4.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetByte5">void gxMAC48::SetByte5(unsigned char b = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set MAC address byte 5.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetByte6">void gxMAC48::SetByte6(unsigned char b = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set MAC address byte 6.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetMACAddress">int gxMAC48::SetMACAddress(const char *mac, char delimiter = ':', int tuple = 2)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the MAC address using a null terminated character string. Return false if the string is not formatted correctly using the 48-bit notation: 00:60:B0:F9:B8:95, 00-60-B0-F9-B8-95, 0060.B0F9.B895, or 0060-B0F9-B895</P>
<B><FONT COLOR="#000080"><P><A NAME="SetMACAddress_overload_1">int gxMAC48::SetMACAddress(char *mac, char delimiter = ':', int tuple = 2)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the MAC address using a null terminated character string. Return false if the string is not formatted correctly using the 48-bit notation: 00:60:B0:F9:B8:95, 00-60-B0-F9-B8-95, 0060.B0F9.B895, or 0060-B0F9-B895 </P>
<B><FONT COLOR="#000080"><P><A NAME="SetMACAddress_overload_2">void gxMAC48::SetMACAddress(unsigned char b1 = 0, unsigned char b2 = 0, unsigned char b3 = 0, unsigned char b4 = 0,unsigned char b5 = 0, unsigned char b6 = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the MAC address using individual byte values.</P>
<B><FONT COLOR="#000080"><P><A NAME="SizeOf">unsigned gxMAC48::SizeOf()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the size of a gxMAC48 object. </P>
<B><FONT COLOR="#000080"><P><A NAME="c_str">char *gxMAC48::c_str(char *sbuf, char delimiter = ':', int tuple = 2)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back a null terminated MAC48 string in the "sbuf" variable and redundantly return the string. <B>NOTE</B>: The calling function must allocate a memory buffer large enough to hold a single MAC48 string.</P>
<B><FONT COLOR="#000080"><P><A NAME="ParseMACVendorEntry">int ParseMACVendorEntry(char *entry, char *code, char *name, char *comment)</A></B></FONT> - Standalone function used to parse a single line of a MAC vendor code text file. Returns true if no error were encountered or false if the line does not contain a valid vendor code and name. MAC vendor text database format:</P>
<PRE>&lt;vendor code&gt; &lt;vendor name&gt; [# comments]</PRE>
<B><FONT COLOR="#000080"><P><A NAME="FindVendor1">int FindVendor(const char *fname, const char *code, char *name, char *comment)</A></B></FONT> - Standalone function used to find vendor information in a MAC code text database file. Returns true if a match is found or false if a match could not be found or an error occurs. If successful the vendor name and any comments will be passed back in the "name" and "comment" variables.</P>
<B><FONT COLOR="#000080"><P><A NAME="FindVendor2">int FindVendor(const char *fname, const gxMAC48 &amp;mac, char *name, char *comment)</A></B></FONT> - Standalone function used to find vendor information in a MAC code text database file. Returns true if a match is found or false if a match could not be found or an error occurs. If successful the vendor name and any comments will be passed back in the "name" and "comment" variables.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>

</BODY>
</HTML>
