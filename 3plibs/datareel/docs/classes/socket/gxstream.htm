<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Database Stream Class </TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Database Stream Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The gxStream class is derived from the <A HREF="gxsocket.htm">gxSocket</A> class and is used to send and receive database blocks over a TCP connection.</P>
<B><P><A NAME="Description">Description</A></B>: The 32/64-bit gxDatabase engine is used to construct multi-platform database files. Since its inception additional communication components have been added to the library to support TCP/IP communications via TCP and UDP sockets. The additional communication components are part of sub-library named the gxSocket Library. By adding gxSocket components to existing gxDatabase applications you can read and write database blocks over a local or wide are network in real-time. gxSocket applications use the network to allow database application to communicate with each. Database blocks are contiguous bytes of binary data marked with a block header. The block header contain a block check word, the size of the block, the block status, and a pointer to the next deleted block (applicable to disk files only). When a database block is allocated a new block header is constructed and written to the database file directly before the space allocated for the block data. Using the 
gxSocket library extensions the same block header written to a disked-based database can be used to transmit a database block to a remote host. By design, gxDatabase files use an internal format for byte ordering allowing block headers to work transparently in a multi-platform environment.</P>
<B><P>Protocol Number</B>: TCP &amp; UDP</P>
<B><P>Message Formats</B>: Block check-word, block length, and status code </P>
<B><P>Message Types</B>: Request, reply, acknowledge, shutdown</P>
<B><P>Message opcodes</B>: Add block, change block, delete remote block, client request failed, close client/server connection, shutdown client/server, request block, send raw data, acknowledge block</P>
<B><P>Message Sequences</B>: When a client sends a block of raw data a block header precedes the data and informs the server of the block size and the block status. After reception of a device header the server waits for the block data and processes the data or signals/handles an event according to the status of the block.</P>
<B><P>Protocol functions</B>: Communication via database block headers allows gxDatabase applications to share database blocks in a client/server relationship.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxStream">gxStream::gxStream()</A><BR>
<A HREF="#BM_gxStream">gxStream::~gxStream()</A><BR>
<A HREF="#AddBlock">gxStream::AddBlock()</A><BR>
<A HREF="#ChangeBlock">gxStream::ChangeBlock()</A><BR>
<A HREF="#CloseConnection">gxStream::CloseConnection()</A><BR>
<A HREF="#DeleteBlock">gxStream::DeleteBlock()</A><BR>
<A HREF="#HostName">gxStream::HostName()</A><BR>
<A HREF="#PortNumber">gxStream::PortNumber()</A><BR>
<A HREF="#ReadAckBlock">gxStream::ReadAckBlock()</A><BR>
<A HREF="#ReadBlock">gxStream::ReadBlock()</A><BR>
<A HREF="#ReadClientHeader">gxStream::ReadClientHeader()</A><BR>
<A HREF="#ReadHeader">gxStream::ReadHeader()</A><BR>
<A HREF="#ReadRemoteAckBlock">gxStream::ReadRemoteAckBlock()</A><BR>
<A HREF="#ReadRemoteBlock">gxStream::ReadRemoteBlock()</A><BR>
<A HREF="#RemoteHostName">gxStream::RemoteHostName()</A><BR>
<A HREF="#RemotePortNumber">gxStream::RemotePortNumber()</A><BR>
<A HREF="#RequestBlock">gxStream::RequestBlock()</A><BR>
<A HREF="#SetBlockStatus">gxStream::SetBlockStatus()</A><BR>
<A HREF="#StreamClient">gxStream::StreamClient()</A><BR>
<A HREF="#StreamServer">gxStream::StreamServer()</A><BR>
<A HREF="#TerminateConnection">gxStream::TerminateConnection()</A><BR>
<A HREF="#WriteAckBlock">gxStream::WriteAckBlock()</A><BR>
<A HREF="#WriteBlock">gxStream::WriteBlock()</A><BR>
<A HREF="#WriteHeader">gxStream::WriteHeader()</A><BR>
<A HREF="#WriteRemoteAckBlock">gxStream::WriteRemoteAckBlock()</A><BR>
<A HREF="#WriteRemoteBlock">gxStream::WriteRemoteBlock()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="gxStream">gxStream::gxStream()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="BM_gxStream">gxStream::~gxStream()</A></B></FONT>&nbsp;-&nbsp;Class destructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="AddBlock">int gxStream::AddBlock(const void *block, gxBlockHeader &amp;block_header)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request that the block pointed to by the "block" variable be added by a local or remote device. The <A HREF="../database/gxheader.htm#BlockHeader">block header</A> must account for the total length of the data pointed to by the "block" variable. Returns zero if no errors occur or a non-zero value to indicate a failure. </P>
<B><FONT COLOR="#000080"><P><A NAME="AddBlock_overload_1">int gxStream::AddBlock(gxsSocket_t s, const void *block, gxBlockHeader &amp;block_header)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request that the block pointed to by the "block" variable be added by the specified socket descriptor. The <A HREF="../database/gxheader.htm#BlockHeader">block header</A> must account for the total length of the data pointed to by the "block" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeBlock">int gxStream::ChangeBlock(const void *request, const void *block, gxBlockHeader &amp;request_header, gxBlockHeader &amp;block_header)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request that the block pointed to by the "block" variable be changed by a local or remote device. The "request" variable points to the new information that will be inserted in place of the block pointed to by the "block" variable. The <A HREF="../database/gxheader.htm#BlockHeader">block header</A> must account for the total length of the data pointed to by the "block" variable and the "request_header" must account for the total length of the data pointed to by the "request" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeBlock_overload_1">int gxStream::ChangeBlock(gxsSocket_t s, const void *request, const void *block, gxBlockHeader &amp;request_header,gxBlockHeader &amp;block_header)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request that the block pointed to by the "block" variable be changed by the specified socket descriptor. The "request" variable points to the new information that will be inserted in place of the block pointed to by the "block" variable. The <A HREF="../database/gxheader.htm#BlockHeader">block header</A> must account for the total length of the data pointed to by the "block" variable and the "request_header" must account for the total length of the data pointed to by the "request" variable. Returns zero if no errors occur or a non-zero value to indicate a failure. </P>
<B><FONT COLOR="#000080"><P><A NAME="CloseConnection">int gxStream::CloseConnection()</A></B></FONT>&nbsp;-&nbsp;Public member function that sends a block command used to close a persistent client or server connection. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="CloseConnection_overload_1">int gxStream::CloseConnection(gxsSocket_t s)</A></B></FONT>&nbsp;-&nbsp;Public member function that sends a block command to the specified socket descriptor used to close a persistent client or server connection. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteBlock">int gxStream::DeleteBlock(const void *request, gxBlockHeader &amp;request_header)</A></B></FONT>&nbsp;- Public member function used to request that the a block pointed to by the "request" variable be deleted. The "request_header" must account for the total length of the data pointed to by the "request" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteBlock_overload_1">int gxStream::DeleteBlock(gxsSocket_t s, const void *request,gxBlockHeader &amp;request_header)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request that the a block pointed to by the "request" variable be deleted by the specified socket descriptor. The "request_header" must account for the total length of the data pointed to by the "request" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="HostName">int gxStream::HostName(char *hs)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back the host name of this machine in the "hs" variable. <B>NOTE</B>: A memory buffer equal to <A HREF="gxsocket.htm#Constants">gxsMAX_NAME_LEN</A> must be pre-allocated prior to using this function. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="PortNumber">int gxStream::PortNumber(int &amp;port)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back the port number actually set by the system in the "port" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadAckBlock">int gxStream::ReadAckBlock()</A></B></FONT>&nbsp;-&nbsp;Public member function used to read an acknowledgment block. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadAckBlock_overload_1">int gxStream::ReadAckBlock(gxsSocket_t s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read an acknowledgment block from the specified socket descriptor. Returns zero if no errors occurs or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadBlock">int gxStream::ReadBlock(gxsSocket_t s, void *buf, gxBlockHeader &amp;gx)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a variable block from the specified socket descriptor. The <A HREF="../database/gxheader.htm#BlockHeader">block header</A> must account for the total length of the data pointed to by the "buf" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadClientHeader">int gxStream::ReadClientHeader(gxBlockHeader &amp;gxs)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a client header. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadHeader">int gxStream::ReadHeader(gxsSocket_t s, gxBlockHeader &amp;gx)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a device block header from the specified socket descriptor. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadRemoteAckBlock">int gxStream::ReadRemoteAckBlock()</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a client acknowledgment block. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadRemoteBlock">int gxStream::ReadRemoteBlock(void *buf, gxBlockHeader &amp;gx)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a remote block. The <A HREF="../database/gxheader.htm#BlockHeader">block header</A> must account for the total length of the data pointed to by the "buf" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="RemoteHostName">int gxStream::RemoteHostName(char *hs)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back the host name of the client in the "hs" variable. <B>NOTE</B>: A memory buffer for "hs" equal to <A HREF="gxsocket.htm#Constants">gxsMAX_NAME_LEN</A> must be pre-allocated prior to using this function. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="RemotePortNumber">int gxStream::RemotePortNumber(int &amp;port)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back the client's port number in the "port" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="RequestBlock">void *gxStream::RequestBlock(const void *request, gxBlockHeader &amp;request_header, gxBlockHeader &amp;requested_block_header)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request a block from the remote end. The "request" variable points to the request information. The "request_header" must account for the total length of the data pointed to by the "request" variable. Returns the requested block or a null value if an error occurs. The block returned by this function must be typecast to the correct type by the calling function.</P>
<B><FONT COLOR="#000080"><P><A NAME="RequestBlock_overload_1">void *gxStream::RequestBlock(gxsSocket_t s, const void *request, gxBlockHeader &amp;request_header,gxBlockHeader &amp;requested_block_header)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request a block from the specified socket descriptor. The "request" variable points to the request information. The "request_header" must account for the total length of the data pointed to by the "request" variable. Returns the requested block or a null value if an error occurs. The block returned by this function must be typecast to the correct type by the calling function.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetBlockStatus">void gxStream::SetBlockStatus(gxBlockHeader &amp;gx, __SBYTE__ net_status,__SBYTE__ file_status = gxRemoteDeviceBlock)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the variable <A HREF="../database/gxheader.htm#BlockHeader">block header</A> status member control byte. <B>NOTE</B>: The block's next deleted variable must be set, if needed, after a call to this function. The block length will not be set here.</P>
<B><FONT COLOR="#000080"><P><A NAME="StreamClient">int gxStream::StreamClient(int port, char *host)</A></B></FONT>&nbsp;-&nbsp;Public member function used to connect a stream client to the specified host. Returns zero if no errors occur during initialization or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="StreamServer">int gxStream::StreamServer(int port, int max_connections = SOMAXCONN)</A></B></FONT>&nbsp;-&nbsp;Public member function used to initialize a stream server. Returns zero if no errors occur during initialization or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="TerminateConnection">int gxStream::TerminateConnection()</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a block command that will shutdown a server or client. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="TerminateConnection_overload_1">int gxStream::TerminateConnection(gxsSocket_t s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a block command to the specified socket descriptor that will shutdown a server or client. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteAckBlock">int gxStream::WriteAckBlock()</A></B></FONT>&nbsp;-&nbsp;Public member function used to write an acknowledgment block. Returns zero if no errors occur or a non-zero value to indicate a failure. </P>
<B><FONT COLOR="#000080"><P><A NAME="WriteAckBlock_overload_1">int gxStream::WriteAckBlock(gxsSocket_t s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write an acknowledgment block to the specified socket descriptor. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteBlock">int gxStream::WriteBlock(const void *buf, int bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a block of raw data. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteBlock_overload_1">int gxStream::WriteBlock(gxsSocket_t s, const void *buf, int bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a block of raw data to the specified socket descriptor. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteBlock_overload_2">int gxStream::WriteBlock(gxsSocket_t s, const void *buf, gxBlockHeader &amp;gx)</A></B></FONT>&nbsp;-Public member function used to write a variable block to the specified socket descriptor. The <A HREF="../database/gxheader.htm#BlockHeader">block header</A> must account for the total length of the data pointed to by the "buf" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteHeader">int gxStream::WriteHeader(gxsSocket_t s, gxBlockHeader &amp;gx)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a block header to the specified socket descriptor. Returns zero if no errors occur or a non-zero value to indicate a failure. </P>
<B><FONT COLOR="#000080"><P><A NAME="WriteRemoteAckBlock">int gxStream::WriteRemoteAckBlock()</A></B></FONT>&nbsp;-&nbsp;Public member function used to write an acknowledgment block to the remote end. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteRemoteBlock">int gxStream::WriteRemoteBlock(void *buf, int bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a block of raw data to the remote end. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>

</BODY>
</HTML>
