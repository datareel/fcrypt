<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> FileUtilsExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 01/25/2000</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Test program used to test the file and directory utility functions.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "futils.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

void PausePrg() 
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

void DirectoryFunctionTest()
{
  cout &lt;&lt; "Testing general purpose directory functions" 
       &lt;&lt; "\n";

  const char *dirname = "testdir"; <FONT COLOR="#ff0000">// Directory to be created</FONT>

  <FONT COLOR="#ff0000">// Directory immediately above the current directory position</FONT>
  const char *parentdir = "..";    
  
  cout &lt;&lt; "Creating " &lt;&lt; dirname &lt;&lt; " directory" &lt;&lt;"\n";
  if(futils_mkdir(dirname) != 0) {
    cout &lt;&lt; "Error creating the directory" &lt;&lt; "\n";
    return;
  }

  if((futils_exists(dirname)) &amp;&amp; (futils_isdirectory(dirname))) {
    cout &lt;&lt; "The " &lt;&lt; dirname &lt;&lt; " directory was created" &lt;&lt; "\n";
  }

  cout &lt;&lt; "Changing directory to " &lt;&lt; dirname &lt;&lt; " directory" &lt;&lt;"\n";
  if(futils_chdir(dirname) != 0) {
    cout &lt;&lt; "Error changing directory" &lt;&lt; "\n";
    return;
  }

  char *pwd[futils_MAX_DIR_LENGTH]; char drive_letter;
  if(futils_getcwd((char *)pwd, futils_MAX_DIR_LENGTH) == 0) {
    cout &lt;&lt; "Present working directory: " &lt;&lt; (char *)pwd &lt;&lt; "\n";
    if(futils_hasdriveletter((const char *)pwd, &amp;drive_letter)) {
      cout &lt;&lt; "DOS Drive letter = " &lt;&lt; drive_letter &lt;&lt; "\n";
    }
  }

  cout &lt;&lt; "Changing directory to " &lt;&lt; parentdir &lt;&lt; " directory" &lt;&lt;"\n";
  if(futils_chdir(parentdir) != 0) {
    cout &lt;&lt; "Error changing directory" &lt;&lt; "\n";
    return;
  }

  if(futils_getcwd((char *)pwd, futils_MAX_DIR_LENGTH) == 0) {
    cout &lt;&lt; "Present working directory: " &lt;&lt; (char *)pwd &lt;&lt; "\n";
    if(futils_hasdriveletter((const char *)pwd, &amp;drive_letter)) {
      cout &lt;&lt; "DOS Drive letter = " &lt;&lt; drive_letter &lt;&lt; "\n";
    }
  }

  cout &lt;&lt; "Removing " &lt;&lt; dirname &lt;&lt; " directory" &lt;&lt;"\n";
  if(futils_rmdir(dirname) != 0) {
    cout &lt;&lt; "Error removing directory" &lt;&lt; "\n";
    return;
  }
}

int main(int argc, char *argv[])
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  DIR* dirp;
  dirent* direntp;
  char *directory = argv[1]; 

  if(argc &lt; 2) {
    cout &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " directory" &lt;&lt; "\n";
#if defined (__WIN32__)
    cout &lt;&lt; "Example: " &lt;&lt; argv[0] &lt;&lt; " C:\\temp" &lt;&lt; "\n";
#elif defined (__UNIX__)
    cout &lt;&lt; "Example: " &lt;&lt; argv[0] &lt;&lt; " /tmp" &lt;&lt; "\n";
#else
#error You must define a target platform: __WIN32__ or __UNIX__
#endif
    return 1;
  }

  <FONT COLOR="#ff0000">// Test the general-purpose directory stream functions  </FONT>
  cout &lt;&lt; "Testing general purpose directory stream functions" &lt;&lt; "\n";
  cout &lt;&lt; "Opening the specified directory and list all files" &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  dirp = futils_opendir(directory);
  if(dirp == NULL) {
    cout &lt;&lt; "Cannot open " &lt;&lt; directory &lt;&lt; "\n";
    return 1;
  } 
  else {
    for(;;) {
      dirent entry;
      direntp = futils_readdir(dirp, &amp;entry);
      if(direntp == NULL) break;
      cout &lt;&lt; direntp-&gt;d_name &lt;&lt; "\n" &lt;&lt; flush;
    }
  }
  cout &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Testing the rewind function" &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  futils_rewinddir(dirp);
  for(;;) {
    dirent entry;
    direntp = futils_readdir(dirp, &amp;entry);
    if(direntp == NULL) break;
    cout &lt;&lt; direntp-&gt;d_name &lt;&lt; "\n" &lt;&lt; flush;
  }
  cout &lt;&lt; "\n";

  futils_closedir(dirp);

  PausePrg();
  
  <FONT COLOR="#ff0000">// Test the general-purpose directory functions  </FONT>
  DirectoryFunctionTest();

  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>


</PRE></FONT>

</BODY>
</HTML>
