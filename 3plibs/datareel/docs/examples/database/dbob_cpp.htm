<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> DatabaseObjectSrcExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: dbobject.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/18/1997  </FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Database object class used with the client/server example.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#include "dbobject.h"

DatabaseObjectData::DatabaseObjectData()
{
  oid = (OID)0;
  cid = (CID)0;
  for(int i = 0; i &lt; gxMaxNameLength; i++) name[i] = 0;
}

FAU_t DatabaseObject::WriteObject()
{
  FAU_t addr = Alloc(sizeof(DatabaseObjectData));
  if(addr == (FAU_t)0) return (FAU_t)0;
  
  Write(p, sizeof(DatabaseObjectData));
  if(gxd_error != gxDBASE_NO_ERROR) return (FAU_t)0;

  return addr;
}

int DatabaseObject::ReadObject(FAU_t Address)
{
  <FONT COLOR="#ff0000">// Optimize seeks during intervening reads</FONT>
  SeekTo(Address);
  Read((char *)this-&gt;p, sizeof(DatabaseObjectData));
  if(gxd_error != gxDBASE_NO_ERROR) return 0;
  return 1;
}

FAU_t DatabaseObject::FindObject()
{ 
  <FONT COLOR="#ff0000">// If not using index file or entry not found, search the data file</FONT>
  DatabaseObjectData dbobject;
  dbobject.oid = p-&gt;oid;
  dbobject.cid = p-&gt;cid;
  strcpy(dbobject.name, p-&gt;name);

  FAU_t object_address = (FAU_t)0;

  while(1) {
    object_address = FindFirstObject(object_address);
    if(object_address == (FAU_t)0) break;
    ReadObject(object_address);
    if(gxd_error == gxDBASE_NO_ERROR) {
      if(strcmp(p-&gt;name, dbobject.name) == 0) {
	return object_address; <FONT COLOR="#ff0000">// Found unique data member</FONT>
      }
    }
    object_address++; <FONT COLOR="#ff0000">// Offset the block address</FONT>
  }

  <FONT COLOR="#ff0000">// Reset the objects data</FONT>
  p-&gt;oid = dbobject.oid;
  p-&gt;cid = dbobject.cid;
  strcpy(p-&gt;name, dbobject.name);
  
  return (FAU_t)0; <FONT COLOR="#ff0000">// Could not find </FONT>
}

FAU_t DatabaseObject::ChangeObject(const DatabaseObjectData &amp;new_dbobject_info)
{
  FAU_t addr = FindObject();
  if(addr == (FAU_t)0) return (FAU_t)0; <FONT COLOR="#ff0000">// Object does not exist</FONT>
  Write(&amp;new_dbobject_info, sizeof(new_dbobject_info), addr);
  if(gxd_error != gxDBASE_NO_ERROR) return (FAU_t)0;
  strcpy(p-&gt;name, new_dbobject_info.name);
  p-&gt;oid = new_dbobject_info.oid;
  p-&gt;cid = new_dbobject_info.cid;
  return addr;
}

FAU_t DatabaseObject::DeleteObject()
{
  FAU_t addr = FindObject();
  if(addr == (FAU_t)0) return (FAU_t)0; <FONT COLOR="#ff0000">// Object does not exist</FONT>
  Delete(addr);
  if(gxd_error != gxDBASE_NO_ERROR) return (FAU_t)0;
  return addr;
}

FAU_t DatabaseObject::RemoveObject()
{
  FAU_t addr = FindObject();
  if(addr == (FAU_t)0) return (FAU_t)0; <FONT COLOR="#ff0000">// Object does not exist</FONT>
  Remove(addr);
  if(gxd_error != gxDBASE_NO_ERROR) return (FAU_t)0;
  return addr;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>

</BODY>
</HTML>
