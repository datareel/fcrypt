<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> Btree3CExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 08/22/2000 </FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

gxBtree cache test program used to test the insertion and deletion 
time of a large number of keys.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if !defined (__USE_BTREE_CACHE__)
int main() { return 0; }
#else

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;time.h&gt;
#include "gxdstats.h"
#include "gxbtree.h"
#include "ustring.h"

<FONT COLOR="#ff0000">// Set the Btree order</FONT>
<FONT COLOR="#ff0000">// const BtreeNodeOrder_t MyKeyClassOrder = 8;</FONT>
<FONT COLOR="#ff0000">// const BtreeNodeOrder_t MyKeyClassOrder = 16;</FONT>
<FONT COLOR="#ff0000">// const BtreeNodeOrder_t MyKeyClassOrder = 32;</FONT>
<FONT COLOR="#ff0000">// const BtreeNodeOrder_t MyKeyClassOrder = 64;</FONT>
const BtreeNodeOrder_t MyKeyClassOrder = 128;
<FONT COLOR="#ff0000">// const BtreeNodeOrder_t MyKeyClassOrder = 256;</FONT>
<FONT COLOR="#ff0000">// const BtreeNodeOrder_t MyKeyClassOrder = 1024;</FONT>

<FONT COLOR="#ff0000">// Set the Btree cache size</FONT>
const int num_buckets = 1000;

class MyKeyClass : public DatabaseKeyB
{
public:
  MyKeyClass() : DatabaseKeyB((char *)&amp;data) { }
  MyKeyClass(gxUINT32 i) : DatabaseKeyB((char *)&amp;data) { data = i; }

public: <FONT COLOR="#ff0000">// Base class interface</FONT>
  size_t KeySize() { return sizeof(data); }
  int operator==(const DatabaseKeyB&amp; key) const;
  int operator&gt;(const DatabaseKeyB&amp; key) const;

  <FONT COLOR="#ff0000">// NOTE: This comparison function is only used if the </FONT>
  <FONT COLOR="#ff0000">// __USE_SINGLE_COMPARE__ preprocessor directive is </FONT>
  <FONT COLOR="#ff0000">// defined when the program is compiled.</FONT>
  int CompareKey(const DatabaseKeyB&amp; key) const;
  
public: <FONT COLOR="#ff0000">// Persistent data member</FONT>
  gxUINT32 data;
};

int MyKeyClass::operator==(const DatabaseKeyB&amp; key) const
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  return data == *((gxUINT32 *)kptr-&gt;db_key);
}

int MyKeyClass::operator&gt;(const DatabaseKeyB&amp; key) const
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  return data &gt; *((gxUINT32 *)kptr-&gt;db_key);
}

int MyKeyClass::CompareKey(const DatabaseKeyB&amp; key) const
<FONT COLOR="#ff0000">// NOTE: This comparison function is only used if the </FONT>
<FONT COLOR="#ff0000">// __USE_SINGLE_COMPARE__ preprocessor directive is </FONT>
<FONT COLOR="#ff0000">// defined when the program is compiled.</FONT>
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  if(data == *((gxUINT32 *)kptr-&gt;db_key)) return 0;
  if(data &gt; *((gxUINT32 *)kptr-&gt;db_key)) return 1;
  return -1;
}

void PausePrg()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

void BtreeStatus(gxBtree &amp;btx)
{
  UString intbuf;
  cout &lt;&lt; "\n";
  intbuf &lt;&lt; clear &lt;&lt; btx.Root();
  cout &lt;&lt; "Root address =      " &lt;&lt; intbuf.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Number of trees =   " &lt;&lt; btx.NumTrees() &lt;&lt; "\n";
  cout &lt;&lt; "Number of entries = " &lt;&lt; btx.NumKeys() &lt;&lt; "\n";
  cout &lt;&lt; "Number of nodes =   " &lt;&lt; btx.NumNodes() &lt;&lt; "\n";
  cout &lt;&lt; "B-tree order =      " &lt;&lt; btx.NodeOrder() &lt;&lt; "\n";
  cout &lt;&lt; "B-tree height =     " &lt;&lt; btx.BtreeHeight() &lt;&lt; "\n";
  cout &lt;&lt; "\n";
}

void BtreeCacheStats(BtreeCache &amp;btree_cache)
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "--------- Cache tuning statistics ---------" &lt;&lt; "\n";
  cout &lt;&lt; "Number of dirty buckets = " 
       &lt;&lt; btree_cache.BucketsInUse() &lt;&lt; "\n";
  cout &lt;&lt; "Number of disk reads    = " 
       &lt;&lt; btree_cache.uncached_reads &lt;&lt; "\n";
  cout &lt;&lt; "Number of cached reads  = " 
       &lt;&lt; btree_cache.cached_reads &lt;&lt; "\n";
  cout &lt;&lt; "\n";
}

void BuildTree(gxBtree &amp;btx)
{
  <FONT COLOR="#ff0000">// Adjust this number to set the number of insertions</FONT>
  const unsigned long INSERTIONS = 1 * 1000;       <FONT COLOR="#ff0000">// 1K test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 10 * 1000;      // 10K test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 100 * 1000;     // 100K test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 1000 * 1000;    // 1MEG test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 10000 * 1000;   // 10MEG test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 100000 * 1000;  // 100MEG test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 1000000 * 1000; // 1GIG test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 2000000 * 1000; // 2GIG test</FONT>

  MyKeyClass key;
  MyKeyClass compare_key;

  cout &lt;&lt; "Inserting " &lt;&lt; INSERTIONS &lt;&lt; " keys..." &lt;&lt; "\n";
  const int echo_results = 1;
  unsigned long i, key_count = 0;
  unsigned long curr_count = 0;
  int rv;
  int verify_deletions = 0; <FONT COLOR="#ff0000">// Set to true to verify all deletions</FONT>
  double insert_time = 0;
  
  BtreeCache btree_cache(num_buckets, &amp;btx);
  if(!btree_cache) {
    cout &lt;&lt; "Error constructing the B-tree cache object" &lt;&lt; "\n";
    return;
  }

  <FONT COLOR="#ff0000">// Get CPU clock cycles before entering loop</FONT>
  clock_t begin = clock();

  for(i = 0; i &lt; INSERTIONS; i++) {
    key.data = i;
    clock_t begin_insert = clock();

    <FONT COLOR="#ff0000">// Cached insertion method</FONT>
    rv = btx.Insert(key, compare_key, &amp;btree_cache);

    clock_t end_insert = clock();
    insert_time += (double)(end_insert - begin_insert) / CLOCKS_PER_SEC;
    key_count++;
    curr_count++;

    if(rv != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem adding key - " &lt;&lt; i &lt;&lt; "\n";
      cout &lt;&lt; btx.DatabaseExceptionMessage() &lt;&lt; "\n";
      return;
    }
    if(curr_count == 10000) {
      <FONT COLOR="#ff0000">// Optimize the cache by flushing the LRU buckets</FONT>
      btree_cache.LRUFlush(1000);
      if(echo_results == 1) {
	curr_count = 0;
	cout &lt;&lt; "Inserted " &lt;&lt; i &lt;&lt; " keys in " &lt;&lt; insert_time
	     &lt;&lt; " seconds" &lt;&lt; "\n";
      }
    }
  }
  
  <FONT COLOR="#ff0000">// Get CPU clock cycles after loop is completed </FONT>
  clock_t end =clock();

  <FONT COLOR="#ff0000">// Calculate the elapsed time in seconds. </FONT>
  double elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3); 
  cout &lt;&lt; "Inserted " &lt;&lt; key_count &lt;&lt; " values in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";
  double avg_insert_time = (insert_time/(double)key_count) * 1000;
  cout &lt;&lt; "Average insert time = " &lt;&lt; avg_insert_time &lt;&lt; " milliseconds"  
       &lt;&lt; "\n"; 

  BtreeCacheStats(btree_cache);

  key_count = 0;
  double search_time = 0;
  cout &lt;&lt; "Verifying the insertions..." &lt;&lt; "\n";

  <FONT COLOR="#ff0000">// Cached node used for optimized sort order searches</FONT>
  BtreeCacheNode curr_node(btree_cache);

  begin = clock();
  for(i = 0; i &lt; INSERTIONS; i++) {
    key.data = i;
    clock_t begin_search = clock();

    <FONT COLOR="#ff0000">// Optimized sort order search.</FONT>
    rv = btx.Find(key, compare_key, curr_node);

    clock_t end_search = clock();
    key_count++;
    search_time += (double)(end_search - begin_search) / CLOCKS_PER_SEC;
    
    if(rv != 1) {
      cout &lt;&lt; "Error finding key - " &lt;&lt; i &lt;&lt; "\n";
      cout &lt;&lt; btx.DatabaseExceptionMessage() &lt;&lt; "\n";
      return;
    }
  }

  end = clock();
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3);
  cout &lt;&lt; "Verified " &lt;&lt; key_count &lt;&lt; " values in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";
  double avg_search_time = (search_time/(double)key_count) * 1000;
  cout &lt;&lt; "Average search time = " &lt;&lt; avg_search_time &lt;&lt; " milliseconds"
       &lt;&lt; "\n";

  BtreeCacheStats(btree_cache);

  cout &lt;&lt; "Verifying the entries using a find next sort order search..." 
       &lt;&lt; "\n";
  begin = clock();
  key_count = 0;

  <FONT COLOR="#ff0000">// Walk through the tree starting at the first node</FONT>
  if(btx.FindFirst(key, curr_node)) {
    key_count++;
    while(btx.FindNext(key, compare_key, curr_node)) {
      key_count++;
    }
  }
  else {
    cout &lt;&lt; "\n" &lt;&lt; "Problem finding first key" &lt;&lt; "\n";
    cout &lt;&lt; btx.DatabaseExceptionMessage() &lt;&lt; "\n";
    return;
  }
  
  end =clock();
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3);
  cout &lt;&lt; "Verified " &lt;&lt; key_count &lt;&lt; " words in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";

  BtreeCacheStats(btree_cache);

  cout &lt;&lt; "Verifying the entries using a find prev sort order search..." 
       &lt;&lt; "\n";
  begin = clock();
  key_count = 0;

  <FONT COLOR="#ff0000">// Walk through the tree starting at the last node</FONT>
  if(btx.FindLast(key, curr_node)) {
    key_count++;
    while(btx.FindPrev(key, compare_key, curr_node)) {
      key_count++;
    }
  }
  else {
    cout &lt;&lt; "\n" &lt;&lt; "Problem finding last key" &lt;&lt; "\n";
    cout &lt;&lt; btx.DatabaseExceptionMessage() &lt;&lt; "\n";
    return;
  }
  
  end = clock();
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3);
  cout &lt;&lt; "Verified " &lt;&lt; key_count &lt;&lt; " words in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";

  BtreeCacheStats(btree_cache);

  cout &lt;&lt; "Deleting all the entries..." &lt;&lt; "\n";
  key_count = 0;
  double delete_time = 0;
  begin = clock();
  for(i = 0; i &lt; INSERTIONS; i++) {
    key.data = i;
    clock_t begin_delete = clock();

    rv = btx.Delete(key, compare_key, &amp;btree_cache);
    <FONT COLOR="#ff0000">// rv = btx.FastDelete(key, compare_key, &amp;btree_cache);</FONT>

    clock_t end_delete = clock();
    delete_time += (double)(end_delete - begin_delete) / CLOCKS_PER_SEC;
    key_count++;
    if(rv != 1) {
      cout &lt;&lt; "Error deleting key - " &lt;&lt; i &lt;&lt; "\n";
      return;
    }

    if(verify_deletions) { <FONT COLOR="#ff0000">// Verify the remaining key locations</FONT>
      for(unsigned long j = INSERTIONS-1; j != i; j--) {
	key.data = j;
	rv = btx.Find(key, compare_key, 0);
	if(rv != 1) {
	  cout &lt;&lt; "Error finding key  - " &lt;&lt; j &lt;&lt; "\n";
	  cout &lt;&lt; "After deleting key - " &lt;&lt; i &lt;&lt; "\n";
	  cout &lt;&lt; btx.DatabaseExceptionMessage() &lt;&lt; "\n";
	  return;
	}
      }
    }
  }

  end =clock();
  cout.precision(3);
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout &lt;&lt; "Deleted " &lt;&lt; key_count &lt;&lt; " values in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";
  double avg_delete_time = (delete_time/(double)key_count) * 1000;
  cout &lt;&lt; "Average delete time = " &lt;&lt; avg_delete_time &lt;&lt; " milliseconds"
       &lt;&lt; "\n";

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Re-inserting " &lt;&lt; INSERTIONS &lt;&lt; " keys..." &lt;&lt; "\n";
  key_count = 0;
  insert_time = 0;
  begin = clock();
  for(i = 0; i &lt; INSERTIONS; i++) {
    key.data = i;
    clock_t begin_insert = clock();

    rv = btx.Insert(key, compare_key, &amp;btree_cache);

    clock_t end_insert = clock();
    insert_time += (double)(end_insert - begin_insert) / CLOCKS_PER_SEC;
    key_count++;
    curr_count++;

    if(curr_count == 10000) {
      <FONT COLOR="#ff0000">// Optimize the cache by flushing the LRU buckets</FONT>
      btree_cache.LRUFlush(1000);
    }

    if(rv != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem adding key - " &lt;&lt; i &lt;&lt; "\n";
      cout &lt;&lt; btx.DatabaseExceptionMessage() &lt;&lt; "\n";
      return;
    }
  }
  end =clock();
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3); 
  cout &lt;&lt; "Inserted " &lt;&lt; key_count &lt;&lt; " values in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";
  avg_insert_time = (insert_time/(double)key_count) * 1000;
  cout &lt;&lt; "Average insert time = " &lt;&lt; avg_insert_time &lt;&lt; " milliseconds"  
       &lt;&lt; "\n"; 
}

int main(int argv, char **argc)
{
  const char *fname = "testfile.btx"; <FONT COLOR="#ff0000">// File name of this database</FONT>
  char rev_letter = gxDatabaseRevisionLetter; <FONT COLOR="#ff0000">// Set the default rev letter</FONT>
  if(argv == 2) { <FONT COLOR="#ff0000">// Set a specified revision letter</FONT>
    rev_letter = *argc[1];
    if(rev_letter == '0') rev_letter = '\0';
    <FONT COLOR="#ff0000">// Valid rev letters are:</FONT>
    <FONT COLOR="#ff0000">// Rev 0</FONT>
    <FONT COLOR="#ff0000">// Rev 'A' or 'a'</FONT>
    <FONT COLOR="#ff0000">// Rev 'B' or 'b'</FONT>
    <FONT COLOR="#ff0000">// Rev 'C' or 'c'</FONT>
    <FONT COLOR="#ff0000">// Rev 'D' or 'd'</FONT>
    <FONT COLOR="#ff0000">// Rev 'E' or 'e'</FONT>
    <FONT COLOR="#ff0000">// NOTE: The gxDatabase class will set invalid revision letters</FONT>
    <FONT COLOR="#ff0000">// the version set by the gxDatabaseRevisionLetter constant.  </FONT>
  }

  MyKeyClass key, compare_key;
  gxBtree btx(key, MyKeyClassOrder);

  <FONT COLOR="#ff0000">// Create a new Btree index file</FONT>
  btx.Create(fname, rev_letter);
  if(CheckError(btx.gxDatabasePtr()) != 0) return 1;
  
  <FONT COLOR="#ff0000">// Build the Btree</FONT>
  BuildTree(btx);
  
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
  return 0;
}

#endif <FONT COLOR="#ff0000">// __USE_BTREE_CACHE__</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>

</BODY>
</HTML>
