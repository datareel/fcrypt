<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> FloatingPointExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/05/1997  </FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program for the FLOAT64 class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_NATIVE_FLOAT_TYPES__)
int main() { return 0; } <FONT COLOR="#ff0000">// No test for native types</FONT>
#else

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "gxfloat.h"
#include "dfileb.h"

#if defined (__MSVC__)
#pragma warning(disable:4244) <FONT COLOR="#ff0000">// Function template instantiation warning</FONT>
#endif

const __DPFLOAT__ DPFLOATPositiveLimit = 1.7E+308; <FONT COLOR="#ff0000">// (15 digit precision)</FONT>
const __DPFLOAT__ DPFLOATNegitiveLimit = 1.7E-308; <FONT COLOR="#ff0000">// (15 digit precision)</FONT>

void PausePrg()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

void ClearInputStream(istream &amp;s)
<FONT COLOR="#ff0000">// Used to clear istream</FONT>
{
  char c;
  s.clear();
  while(s.get(c) &amp;&amp; c != '\n') { ; }
}

void FWrite(char *fname)
{
  gxFLOAT64 aa = 3.141592653589793; <FONT COLOR="#ff0000">// Arc cosine of -1 equals pi</FONT>
  cout.precision(15);  <FONT COLOR="#ff0000">// Show 15 places after the decimal point </FONT>
  cout.setf(ios::fixed | ios::right); <FONT COLOR="#ff0000">// Normal FP notation right justified</FONT>
  cout &lt;&lt; "Writing a gxFLOAT64 value " &lt;&lt; aa &lt;&lt; " to a file..." &lt;&lt; "\n";

  DiskFileB stream(fname, DiskFileB::df_READWRITE, DiskFileB::df_CREATE);
  if(!stream) {
    cout &lt;&lt; "Could not open " &lt;&lt; fname &lt;&lt; " file" &lt;&lt; "\n";
    return;
  }
  stream.df_Write(&amp;aa, sizeof(gxFLOAT64));
  cout &lt;&lt; "Wrote " &lt;&lt; stream.df_pcount() &lt;&lt; " bytes" &lt;&lt; "\n";
  stream.df_Close();
}

void FRead(char *fname)
{
  gxFLOAT64 bb = 0;
  cout.precision(15);  <FONT COLOR="#ff0000">// Show 15 places after the decimal point </FONT>
  cout.setf(ios::fixed | ios::right); <FONT COLOR="#ff0000">// Normal FP notation right justified</FONT>
  cout &lt;&lt; "Reading back gxFLOAT64 value from the file..." &lt;&lt; "\n";

  DiskFileB stream(fname);
  if(!stream) {
    cout &lt;&lt; "Could not open " &lt;&lt; fname &lt;&lt; " file" &lt;&lt; "\n";
    return;
  }
  stream.df_Read(&amp;bb, sizeof(gxFLOAT64));
  cout &lt;&lt; "Read " &lt;&lt; stream.df_gcount() &lt;&lt; " bytes" &lt;&lt; "\n";
  stream.df_Close();
  cout &lt;&lt; "Value read from file = " &lt;&lt; bb &lt;&lt; "\n";
}

template&lt;class TYPEX, class TYPEY&gt;
inline void OperatorTest(TYPEX x, TYPEY y)
{
  char *tf[2] = {"FALSE", "TRUE"};
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Value x = " &lt;&lt; x &lt;&lt; ", Value y = " &lt;&lt; y &lt;&lt; "\n";
  TYPEX z;
  cout &lt;&lt; x &lt;&lt; " += " &lt;&lt; y &lt;&lt; " = "; z = x; z += y; cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " -= " &lt;&lt; y &lt;&lt; " = "; z = x; z -= y; cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " *= " &lt;&lt; y &lt;&lt; " = "; z = x; z *= y; cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " /= " &lt;&lt; y &lt;&lt; " = "; z = x; z /= y; cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " * " &lt;&lt; y &lt;&lt; " = " ; z = (x * y); cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " / " &lt;&lt; y &lt;&lt; " = " ; z = (x / y); cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " + " &lt;&lt; y &lt;&lt; " = " ; z = (x + y); cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " - " &lt;&lt; y &lt;&lt; " = " ; z = (x - y); cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " == " &lt;&lt; y &lt;&lt; " = " &lt;&lt; tf[(x == y)] &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " != " &lt;&lt; y &lt;&lt; " = " &lt;&lt; tf[(x != y)] &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " &lt;= " &lt;&lt; y &lt;&lt; " = " &lt;&lt; tf[(x &lt;= y)] &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " &gt;= " &lt;&lt; y &lt;&lt; " = " &lt;&lt; tf[(x &gt;= y)] &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " &lt; " &lt;&lt; y &lt;&lt; " = " &lt;&lt; tf[(x &lt; y)] &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " &gt; " &lt;&lt; y &lt;&lt; " = " &lt;&lt; tf[(x &gt; y)] &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; "++ = "; z = x; z++; cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; "-- = "; z = x; z--; cout &lt;&lt; z &lt;&lt; "\n"; 
  cout &lt;&lt; "++" &lt;&lt; x &lt;&lt; " = "; z = x; ++z; cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; "--" &lt;&lt; x &lt;&lt; " = "; z = x; --z; cout &lt;&lt; z &lt;&lt; "\n";
}

int main()
{
  gxFLOAT64 a = DPFLOATPositiveLimit;
  cout &lt;&lt; "gxFLOAT64 positive limit = " &lt;&lt; a &lt;&lt; "\n";

  gxFLOAT64 b(DPFLOATNegitiveLimit);
  cout &lt;&lt; "gxFLOAT64 negitive limit = " &lt;&lt; b &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Testing gxFLOAT64 copy constructor..." &lt;&lt; "\n";
  gxFLOAT64 c(a);
  cout &lt;&lt; c &lt;&lt; "\n";

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Testing gxFLOAT64 assignment operator..." &lt;&lt; "\n";
  gxFLOAT64 d;
  d = a;
  cout &lt;&lt; d &lt;&lt; "\n";

  PausePrg();

  <FONT COLOR="#ff0000">// Reading and writing a gxFLOAT64 value to a file</FONT>
  char fname[255] = "testf64.out";
  FILE *tmp; <FONT COLOR="#ff0000">// Temporary file pointer</FONT>
  tmp = ::fopen(fname, "rb");

  if(tmp) FRead(fname); else FWrite(fname);
    
  PausePrg();
  
  cout.precision(10);  <FONT COLOR="#ff0000">// Show 10 places after the decimal point </FONT>
  cout.setf(ios::fixed | ios::right); <FONT COLOR="#ff0000">// Normal FP notation right justified</FONT>
  cout &lt;&lt; "Testing overloaded operators (gxFLOAT64, gxFLOAT64)..." &lt;&lt; "\n";
  __DPFLOAT__ buf1, buf2, af, bf;
  
  cout &lt;&lt; "Enter first floating point value: ";
  cin &gt;&gt; buf1;
  if(cin) {
    a = buf1;
    af = buf1;
    cout &lt;&lt; "Enter second floating point value: ";
    cin &gt;&gt; buf2;
  }
  else {
    cout &lt;&lt; "Input stream broken. Exiting..." &lt;&lt; "\n";
    return 0;
  }
  if(cin) {
    b = buf2;
    bf = buf2;
  }
  else {
    cout &lt;&lt; "Input stream broken. Exiting..." &lt;&lt; "\n";
    return 0;
  }

  ClearInputStream(cin);
    
  cout &lt;&lt; "\n";
  
  OperatorTest(a, b);
  
  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (gxFLOAT64, __DPFLOAT__)..." &lt;&lt; "\n";
  OperatorTest(a, bf);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (__DPFLOAT__, gxFLOAT64)..." &lt;&lt; "\n";
  OperatorTest(af, b);
  
  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (gxFLOAT64, __LWORD__)..." &lt;&lt; "\n";
  OperatorTest(a, (__LWORD__)bf);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (__LWORD__, gxFLOAT64)..." &lt;&lt; "\n";
  OperatorTest((__LWORD__)af, b);
  
  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (gxFLOAT64, __WORD__)..." &lt;&lt; "\n";
  OperatorTest(a, (__WORD__)bf);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (__WORD__, gxFLOAT64)..." &lt;&lt; "\n";
  OperatorTest((__WORD__)af, b);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (gxFLOAT64, __SWORD__)..." &lt;&lt; "\n";
  OperatorTest(a, (__SWORD__)bf);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (__SWORD__, gxFLOAT64)..." &lt;&lt; "\n";
  OperatorTest((__SWORD__)af, b);

  PausePrg();
  
  cout &lt;&lt; "Testing overloaded operators (gxFLOAT64, __UWORD__)..." &lt;&lt; "\n";
  OperatorTest(a, (__UWORD__)bf);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (__UWORD__, gxFLOAT64)..." &lt;&lt; "\n";
  OperatorTest((__UWORD__)af, b);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (gxFLOAT64, __USWORD__)..." &lt;&lt; "\n";
  OperatorTest(a, (__USWORD__)bf);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (__USWORD__, gxFLOAT64)..." &lt;&lt; "\n";
  OperatorTest((__USWORD__)af, b);

  PausePrg();
  
  cout &lt;&lt; "Testing overloaded operators (gxFLOAT64, __SBYTE__)..." &lt;&lt; "\n";
  OperatorTest(a, 'B');

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (__SBYTE__, gxFLOAT64)..." &lt;&lt; "\n";
  OperatorTest('A', b);

  return 0;
}

#if defined (__MSVC__)
#pragma warning(default:4244) <FONT COLOR="#ff0000">// Restore previous warning</FONT>
#endif

#endif <FONT COLOR="#ff0000">// __USE_NATIVE_FLOAT_TYPES__</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>

</BODY>
</HTML>
