<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> BroadcastClientExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: client.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 10/20/2001</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Simple broadcast receiver demo using the gxSocket class. 
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include "gxsocket.h"

int main(int argc, char **argv)
{
  if(argc != 2) {
    cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " &lt;Broadcast Port&gt;" &lt;&lt; "\n" &lt;&lt; flush;
    cerr &lt;&lt; "Example: " &lt;&lt; argv[0] &lt;&lt; " 12345" &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  unsigned short port = (unsigned short) atoi(argv[1]);

  cout &lt;&lt; "Constructing broadcast client..." &lt;&lt; "\n" &lt;&lt; flush;
  <FONT COLOR="#ff0000">// NOTE: Do not set the IP address here. This will allow the</FONT>
  <FONT COLOR="#ff0000">// socket to accept any incoming interface</FONT>
  gxSocket client(SOCK_DGRAM, SOCK_DGRAM, IPPROTO_UDP, port);
  if(!client) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  <FONT COLOR="#ff0000">// Bind to the broadcast port</FONT>
  int rv = client.Bind();
  if(rv &lt; 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  cout &lt;&lt; "Receiving broadcast datagrams on port " &lt;&lt; port &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Press Ctrl-C to exit" &lt;&lt; "\n" &lt;&lt; flush;

  const int buf_len = 255; <FONT COLOR="#ff0000">// Receive buffer size</FONT>
  char sbuf[buf_len]; sbuf[0] = 0;
  
  while(1) {
    rv = client.RawReadFrom(sbuf, buf_len); <FONT COLOR="#ff0000">// Non-blocking read</FONT>
    if(rv &lt; 0) {
      cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
      return 1;
    }
    sbuf[rv] = 0; <FONT COLOR="#ff0000">// Null terminate the string before printing</FONT>
    cout &lt;&lt; sbuf &lt;&lt; flush;
  }

  cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
  client.Close(); <FONT COLOR="#ff0000">// Close the socket connection</FONT>
  client.ReleaseSocketLibrary();
  
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>

</BODY>
</HTML>
