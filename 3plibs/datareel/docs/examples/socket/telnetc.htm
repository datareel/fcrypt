<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> TelnetClientExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 02/23/2001</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Test program for the embedded telnet client class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
#include "gxtelnet.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

int CheckError(gxsTelnetClient *telnetc)
<FONT COLOR="#ff0000">// Checks the specified stream socket for an error condition</FONT>
{
  if(telnetc-&gt;GetSocketError() != gxSOCKET_NO_ERROR) {
    cout &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; telnetc-&gt;SocketExceptionMessage() &lt;&lt; flush &lt;&lt; "\n";
    telnetc-&gt;Close();
    return 0;
  }
  return 1; <FONT COLOR="#ff0000">// No errors reported</FONT>
}

int main(int argc, char **argv)
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  if(argc &lt; 4) {
    cout &lt;&lt; "You must specify host, username, and password" &lt;&lt; "\n";
    cout &lt;&lt; "Example: " &lt;&lt; argv[0] &lt;&lt; " host usr passwd [port]" &lt;&lt; "\n";
    cout &lt;&lt; "host = Host name of the telnet server" &lt;&lt; "\n";
    cout &lt;&lt; "usr  = Your user name" &lt;&lt; "\n";
    cout &lt;&lt; "passwd = Your password" &lt;&lt; "\n";
    return 0;
  }
  char *hostname = argv[1];
  char *username = argv[2];
  char *password = argv[3];
  unsigned short port = (unsigned short)23;
  if(argc == 5) port = atoi(argv[4]);
    
  gxsTelnetClient telnetc;

  <FONT COLOR="#ff0000">// Test terminal emulations</FONT>
  <FONT COLOR="#ff0000">// telnetc.SetTermType(gxsTEL_NVT_TERM); // Default</FONT>
  <FONT COLOR="#ff0000">// telnetc.SetTermType(gxsTEL_ENV_TERM); // Use ENV TERM setting</FONT>
  <FONT COLOR="#ff0000">// telnetc.SetTermType(gxsTEL_VT100F_TERM); // Filtered VT100 emulation</FONT>

  <FONT COLOR="#ff0000">// Try with WIN32 consoles using the ANSI.SYS driver </FONT>
  <FONT COLOR="#ff0000">// telnetc.SetTermType("ANSI");</FONT>

  cout &lt;&lt; "Connecting to " &lt;&lt; hostname &lt;&lt; " on port " &lt;&lt; port &lt;&lt; "\n";
  cout &lt;&lt; "Our terminal type is: " &lt;&lt; telnetc.GetTermType() &lt;&lt; "\n";

  telnetc.ConnectClient(hostname, port);
  if(!CheckError(&amp;telnetc)) return 1;
  
  telnetc.RecvInitSeq();
  if(!CheckError(&amp;telnetc)) return 1;

  const int sbuf_size = 4096;
  char sbuf[sbuf_size];
  telnetc.RecvString(sbuf, sbuf_size, "login");
  if(!CheckError(&amp;telnetc)) { 
    cout &lt;&lt; sbuf &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  cout &lt;&lt; sbuf &lt;&lt; flush;

  telnetc.SendString((const char *)username, strlen(username));
  if(!CheckError(&amp;telnetc)) return 1;

  telnetc.RecvString(sbuf, sbuf_size, "Password");
  if(!CheckError(&amp;telnetc)) { 
    cout &lt;&lt; sbuf &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  cout &lt;&lt; sbuf &lt;&lt; "\n" &lt;&lt; flush;

  telnetc.SendString((const char *)password, strlen(password));
  if(!CheckError(&amp;telnetc)) return 1;

  telnetc.RecvString(sbuf, sbuf_size, "$");
  if(!CheckError(&amp;telnetc)) { 
    cout &lt;&lt; sbuf &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  cout &lt;&lt; sbuf &lt;&lt; "\n" &lt;&lt; flush;

  telnetc.SendString("ls -l", strlen("ls -l"));
  if(!CheckError(&amp;telnetc)) return 1;

  telnetc.RecvString(sbuf, sbuf_size, "$");
  cout &lt;&lt; sbuf &lt;&lt; "\n" &lt;&lt; flush;

  cout &lt;&lt; "Closing the telnet connection..." &lt;&lt; "\n";
  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
  telnetc.Close(); 
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>

</BODY>
</HTML>
