<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> DatagramServerExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: server.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This program is used to the gxDatagram class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include "gxdatagm.h"

int ReadBlock(gxDatagram *server, gxBlockHeader &amp;gx)
{
  cout &lt;&lt; "Reading a raw block of data" &lt;&lt; "\n" &lt;&lt; flush;
  __ULWORD__ block_size = (__ULWORD__)gx.block_length; 

  char *buf = new char[block_size];
  if(server-&gt;ReadRemoteBlock(buf, gx) != 0) {
    delete[] buf;
    return 1;
  }

  cout.write(buf, block_size);
  cout &lt;&lt; server-&gt;BytesRead() &lt;&lt; " bytes received." &lt;&lt; "\n" &lt;&lt; flush;
  
  delete[] buf;
  return 0;
}

int AnswerRequest(gxDatagram *server, gxBlockHeader &amp;gx)
{
  cout &lt;&lt; "Client has requested a block" &lt;&lt; "\n" &lt;&lt; flush;
 
  char *test_block = "The quick brown fox jumps over the lazy dog \
0123456789\n";

  __ULWORD__ block_size = (__ULWORD__)gx.block_length; 

  char *buf = new char[block_size];
  if(server-&gt;ReadRemoteBlock(buf, gx) != 0) {
    delete[] buf;
    return 1;
  }

  cout &lt;&lt; "Client has requested block: ";
  cout.write(buf, block_size);
  cout &lt;&lt; "\n" &lt;&lt; flush;
  delete[] buf;

  cout &lt;&lt; "Answering request" &lt;&lt; "\n" &lt;&lt; flush;
  
  if(server-&gt;WriteRemoteBlock((char *)test_block, strlen(test_block))
			      != 0) return 1;
  return 0;
}

int ChangeBlock(gxDatagram *server, gxBlockHeader &amp;gx)
{
  cout &lt;&lt; "Received a change block request" &lt;&lt; "\n" &lt;&lt; flush;
  __ULWORD__ block_size = (__ULWORD__)gx.block_length; 

  char *buf = new char[block_size];
  if(server-&gt;ReadRemoteBlock(buf, gx) != 0) {
    delete[] buf;
    return 1;
  }

  cout &lt;&lt; "Client requested that block \"";
  cout.write(buf, block_size);
  cout &lt;&lt; "\" be changed to:" &lt;&lt; "\n" &lt;&lt; flush;
  delete[] buf;

  gxBlockHeader block_header;
  if(server-&gt;ReadClientHeader(block_header) != 0) return 1;

  char *block = new char[(__ULWORD__)block_header.block_length];
  if(server-&gt;ReadRemoteBlock((char *)block, block_header) != 0) {
    delete[] block;
    return 1;
  }

  cout.write(block, (__ULWORD__)block_header.block_length);  
  cout.flush();

  delete[] block;
  return 0;
}

int AddBlock(gxDatagram *server, gxBlockHeader &amp;gx)
{
  cout &lt;&lt; "Received an add block request" &lt;&lt; "\n" &lt;&lt; flush;
  __ULWORD__ block_size = (__ULWORD__)gx.block_length; 

  char *block = new char[block_size];
  if(server-&gt;ReadRemoteBlock(block, gx) != 0) {
    delete[] block;
    return 1;
  }

  cout &lt;&lt; "Client has requested the following block be added:" &lt;&lt; "\n" 
       &lt;&lt; flush;
  cout.write(block, block_size);
  cout.flush();
  delete[] block;
  
  return 0;
}

int DeleteBlock(gxDatagram *server, gxBlockHeader &amp;gx)
{
  cout &lt;&lt; "Received a delete block request" &lt;&lt; "\n" &lt;&lt; flush;
  __ULWORD__ block_size = (__ULWORD__)gx.block_length; 

  char *buf = new char[block_size];
  if(server-&gt;ReadRemoteBlock(buf, gx) != 0) {
    delete[] buf;
    return 1;
  }
  
  cout &lt;&lt; "Client has requested block \"";
  cout.write(buf, block_size);
  cout &lt;&lt; "\" be deleted" &lt;&lt; "\n" &lt;&lt; flush;
  delete[] buf;
  return 0;
}

int main(int argc, char **argv)
{
  <FONT COLOR="#ff0000">// Check arguments. Should be only one: the port number to bind to.</FONT>
  if(argc != 2) {
    cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " port" &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  gxDatagram server;
  unsigned short port = (unsigned short) atoi(argv[1]);

  cout &lt;&lt; "Initializing the GX datagram server..." &lt;&lt; "\n" &lt;&lt; flush;
  if(server.DatagramServer(port) != 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  
  <FONT COLOR="#ff0000">// Get the host name assigned to this machine</FONT>
  char hostname[gxsMAX_NAME_LEN];
  if(server.HostName(hostname) != 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  cout &lt;&lt; "Opening datagram server on host " &lt;&lt; hostname &lt;&lt; "\n" &lt;&lt; flush;

  <FONT COLOR="#ff0000">// Find out what port was really assigned </FONT>
  int assigned_port;
  if(server.PortNumber(assigned_port) != 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  cout &lt;&lt; "Port assigned is " &lt;&lt; assigned_port &lt;&lt; "\n" &lt;&lt; flush;
    
  while(1) { <FONT COLOR="#ff0000">// Block until the next read. </FONT>
    <FONT COLOR="#ff0000">// Read the block following a client connection</FONT>
    gxBlockHeader gx;
    if(server.ReadClientHeader(gx) != 0) {
      cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
      return 1;
    }

    <FONT COLOR="#ff0000">// Get the client info</FONT>
    char client_name[gxsMAX_NAME_LEN]; int r_port = -1;
    server.GetClientInfo(client_name, r_port);
    cout &lt;&lt; client_name &lt;&lt; " connecting on port " &lt;&lt; r_port &lt;&lt; "\n" &lt;&lt; flush;

    <FONT COLOR="#ff0000">// Read the status byte to determine what to do with this block</FONT>
    __ULWORD__ block_status = gx.block_status;
    __SBYTE__ status = (__SBYTE__)((block_status &amp; 0xFF00)&gt;&gt;8);

    switch(status) { 
      <FONT COLOR="#ff0000">// Process each block of data</FONT>
      case gxAcknowledgeBlock:
	cout &lt;&lt; "Received an acknowledge block command" &lt;&lt; "\n" &lt;&lt; flush;
	cout &lt;&lt; "Sending acknowledgment" &lt;&lt; "\n" &lt;&lt; flush;
	if(server.WriteRemoteAckBlock() != 0)
	  cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;	  
	break;

      case gxAddRemoteBlock:
	if(AddBlock(&amp;server, gx) != 0) 
	  cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
	break;

      case gxChangeRemoteBlock:
	if(ChangeBlock(&amp;server, gx) != 0) 
	  cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
	break;

      case gxRequestBlock:
	if(AnswerRequest(&amp;server, gx) != 0) 
	  cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
	break;

      case gxDeleteRemoteBlock:
	if(DeleteBlock(&amp;server, gx) != 0) 
	  cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
	break;

      case gxSendBlock :  
	if(ReadBlock(&amp;server, gx) != 0) 
	  cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
	break;

      case gxCloseConnection : 
	cout &lt;&lt; "Client sent a close connection command" &lt;&lt; "\n" &lt;&lt; flush;
	break;

      case gxKillServer:
	cout &lt;&lt; "Client shutdown the server" &lt;&lt; "\n" &lt;&lt; flush;
	server.Close();
	return 0;
	
      default:
	cout &lt;&lt; "Received bad block command from client" &lt;&lt; "\n" &lt;&lt; flush;
	break;
    }
  }

  cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>

</BODY>
</HTML>
