<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> HTMLParserExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 01/25/2000</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This program is used to test gxsHTML classes. 
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;stdlib.h&gt;
#include "gxshtml.h"
#include "gxs_ver.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

<FONT COLOR="#ff0000">// Version number and program name</FONT>
const double ProgramVersionNumber = gxSocketVersion;
const char *ProgramName = "gxsHTML test program";

<FONT COLOR="#ff0000">// Program globals</FONT>
int parsing_tags = 0;
int listing_doc_tags = 0;
int listing_supported_tags = 0;

int CopyToMemory(const char *fname, MemoryBuffer &amp;membuf)
{
  membuf.Clear();
  const unsigned buf_size = 1024;
  char sbuf[buf_size];
  DiskFileB f(fname);
  if(!f) return f.df_GetError();

  while(!f.df_EOF()) {
    if(f.df_Read((char *)sbuf, buf_size) != DiskFileB::df_NO_ERROR) {
      if(f.df_GetError() != DiskFileB::df_EOF_ERROR) 
	return f.df_GetError();
    }
    membuf.Cat((char *)sbuf, f.df_gcount());
  }

  f.df_Close();
  return 0;
}

void ParseTags(const char *fname)
{
  gxsHTML html;
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Parsing " &lt;&lt; fname &lt;&lt; "\n";
  if(html.LoadHTMLFile(fname) != 0) {
    html.df_ExceptionMessage();
    return;
  }
  
  cout &lt;&lt; "Found " &lt;&lt; html.NumTags() &lt;&lt; " tags" &lt;&lt; "\n";

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Parsing in-memory copy of " &lt;&lt; fname &lt;&lt; "\n";
  MemoryBuffer membuf;
  if(CopyToMemory(fname, membuf) != 0) {
    html.df_ExceptionMessage();
    return;
  }

  if(html.LoadMemoryBuffer(membuf) != 0) {
    cout &lt;&lt; "A memory error occurred" &lt;&lt; "\n";
    return;
  }
  cout &lt;&lt; "Found " &lt;&lt; html.NumTags() &lt;&lt; " tags" &lt;&lt; "\n";
  cout &lt;&lt; "Found " &lt;&lt; html.NumScripts() &lt;&lt; " scripts" &lt;&lt; "\n";
  cout &lt;&lt; "Found " &lt;&lt; html.NumStyleSheets() &lt;&lt; " style sheets" &lt;&lt; "\n";

  cout &lt;&lt; "\n";
}

void PrintTagInfo(const gxsHTMLTagInfo &amp;t)
{
  cout &lt;&lt; "----- Tag's file information-----" &lt;&lt; "\n";
  cout &lt;&lt; "Tag file position (start): " &lt;&lt; (long)t.start_tag &lt;&lt; "\n";
  cout &lt;&lt; "Tag file position (end):   " &lt;&lt; (long)t.end_tag &lt;&lt; "\n";
  cout &lt;&lt; "Tag's total length &lt;----&gt;: " &lt;&lt; t.tag_length &lt;&lt; "\n";
  cout &lt;&lt; "----- Tag Infomation ------" &lt;&lt; "\n";
  cout &lt;&lt; "Tag ID----: " &lt;&lt; t.tag_id &lt;&lt; "\n";
  cout &lt;&lt; "Tag ------: " &lt;&lt; t.tag.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Attributes: " &lt;&lt; t.attr.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Original tag: " &lt;&lt; t.tag_info.c_str() &lt;&lt; "\n";

  cout &lt;&lt; "----- Tag instructions -----" &lt;&lt; "\n";
  if(t.start_instruction) cout &lt;&lt; "Start of tag instruction" &lt;&lt; "\n";
  if(t.end_instruction) cout &lt;&lt; "End of tag instruction" &lt;&lt; "\n";
  if(t.has_attributes) cout &lt;&lt; "This tag has attributes associated with it"
			  &lt;&lt; "\n";
  cout &lt;&lt; "\n";
}

void ListSupportedTags()
{
  gxsHTML html;
  for(int i = 0; i &lt; gxsMAX_SUPPORTED_TAGS; i++) {
    cout &lt;&lt; "&lt;" &lt;&lt; html.GetTag(i) &lt;&lt; "&gt;" &lt;&lt; "\n";
  }
}

void ListDocTags(const char *fname)
{
  gxsHTML html;
  html.LoadHTMLFile(fname);
  if(!html) {
    cout &lt;&lt; "Could not open the " &lt;&lt; fname &lt;&lt; " file!" &lt;&lt; "\n";
    return;
  }

  cout &lt;&lt; "Found " &lt;&lt; html.NumTags() &lt;&lt; " tags" &lt;&lt; "\n";
  cout &lt;&lt; "Found " &lt;&lt; html.NumScripts() &lt;&lt; " scripts" &lt;&lt; "\n";
  cout &lt;&lt; "Found " &lt;&lt; html.NumStyleSheets() &lt;&lt; " style sheets" &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue" &lt;&lt; "\n";
  cin.get();

  gxList&lt;gxsHTMLTagInfo&gt; *tag_list = html.GetTagList();
  gxListNode&lt;gxsHTMLTagInfo&gt; *list_ptr = tag_list-&gt;GetHead();
  while(list_ptr) {
    PrintTagInfo(list_ptr-&gt;data);
    list_ptr = list_ptr-&gt;next; 
  }

  cout &lt;&lt; "End of tags, listing scripts" &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue" &lt;&lt; "\n";
  cin.get();

  gxList&lt;gxsScriptInfo&gt; *script_list = html.GetScriptList();
  gxListNode&lt;gxsScriptInfo&gt; *script_ptr = script_list-&gt;GetHead();
  while(script_ptr) {
    cout &lt;&lt; "\n";
    cout &lt;&lt; script_ptr-&gt;data.script_code.c_str();
    cout &lt;&lt; "\n";
    script_ptr = script_ptr-&gt;next; 
  }

  cout &lt;&lt; "End scripts listing embedded style sheets" &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue" &lt;&lt; "\n";
  cin.get();

  gxList&lt;gxsStyleInfo&gt; *style_sheet_list = html.GetStyleSheetList();
  gxListNode&lt;gxsStyleInfo&gt; *style_sheet_ptr = style_sheet_list-&gt;GetHead();
  while(style_sheet_ptr) {
    cout &lt;&lt; "\n";
    cout &lt;&lt; style_sheet_ptr-&gt;data.style_code.c_str();
    cout &lt;&lt; "\n";
    style_sheet_ptr = style_sheet_ptr-&gt;next; 
  }
}

void HelpMessage(const char *program_name, const double version_number)
{
  cout &lt;&lt; "\n";
  cout.setf(ios::showpoint | ios::fixed);
  cout.precision(3);
  cout &lt;&lt; "\n";
  cout &lt;&lt; program_name &lt;&lt; " version " &lt;&lt; version_number  &lt;&lt; "\n";
  cout &lt;&lt; "Usage: " &lt;&lt; program_name &lt;&lt; " [switches] infile.html" &lt;&lt; "\n";
  cout &lt;&lt; "Example: " &lt;&lt; program_name &lt;&lt; " -l index.html" &lt;&lt; "\n";
  cout &lt;&lt; "Switches: " &lt;&lt; "\n";
  cout &lt;&lt; "          -l = List all the tags found in an HTML document." 
       &lt;&lt; "\n";
  cout &lt;&lt; "          -L = List all the tags supported by this program." 
       &lt;&lt; "\n";
  cout &lt;&lt; "          -p = Parse all the supported tags in an HTML document."
       &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  return;
}

int ProcessArgs(char *arg)
{
  switch(arg[1]) {
    case 'l' :
      parsing_tags = 0;
      listing_doc_tags = 1;
      break;
      
    case 'L' :
      ListSupportedTags();
      return 0;

    case 'p' :
      parsing_tags = 1;
      listing_doc_tags = 0;
      break;

    default:
      cerr &lt;&lt; "\n";
      cerr &lt;&lt; "Unknown switch " &lt;&lt; arg &lt;&lt; "\n";
      cerr &lt;&lt; "Exiting..." &lt;&lt; "\n";
      cerr &lt;&lt; "\n";
      return 0;
  }
  arg[0] = '\0';
  return 1; <FONT COLOR="#ff0000">// All command line arguments were valid</FONT>
}

<FONT COLOR="#ff0000">// Program's main thread of execution.</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- </FONT>
int main(int argc, char **argv)
<FONT COLOR="#ff0000">// NOTE: None of the MSVC compilers will expand wildcard characters</FONT>
<FONT COLOR="#ff0000">// used in command-line arguments unless linked with the setargv.obj</FONT>
<FONT COLOR="#ff0000">// library. All the UNIX compilers will expand wildcard characters</FONT>
<FONT COLOR="#ff0000">// by default.</FONT>
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  if(argc &lt; 2) { 
    HelpMessage(ProgramName, ProgramVersionNumber);
    return 0;
  }
  
  <FONT COLOR="#ff0000">// Process command ling arguments and files </FONT>
  int narg;
  char *arg = argv[narg = 1];

  while (narg &lt; argc) {
    if(arg[0] != '\0') {
      if(arg[0] == '-') { <FONT COLOR="#ff0000">// Look for command line arguments</FONT>
	if(!ProcessArgs(arg)) return 0; <FONT COLOR="#ff0000">// Exit if argument is not valid</FONT>
      }
      else { 
	if(parsing_tags) {
	  ParseTags((const char *)arg);
	}
	else if(listing_doc_tags) {
	  ListDocTags((const char *)arg);
	}
	else {
	  cout &lt;&lt; "No operation specified!" &lt;&lt; "\n";
	  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
	}
      }
      arg = argv[++narg];
    }
  }

  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>

</BODY>
</HTML>
