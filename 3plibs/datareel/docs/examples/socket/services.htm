<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> ServicesExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Program used to test the GXS library service file functions.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;ctype.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include "gxsutils.h"
#include "dfileb.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

int main(int argc, char **argv)
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif
  
  <FONT COLOR="#ff0000">// Check the command line arguments</FONT>
  if(argc != 2) {
    cout &lt;&lt; "\n";
    cout &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " services file" &lt;&lt; "\n";
#if defined (__WIN32__)
    cout &lt;&lt; "Example: " &lt;&lt; argv[0] &lt;&lt; " c:\\windows\\services" &lt;&lt; "\n";
    cout &lt;&lt; "Example: " &lt;&lt; argv[0] 
	 &lt;&lt; " c:\\winnt\\system32\\drivers\\etc\\services" &lt;&lt; "\n";
    cout &lt;&lt; "Example: " &lt;&lt; argv[0] 
	 &lt;&lt; " c:\\windows\\system32\\drivers\\etc\\services" &lt;&lt; "\n";
#else
    cout &lt;&lt; "Example: " &lt;&lt; argv[0] &lt;&lt; " /etc/services" &lt;&lt; "\n";
#endif
    return 1;
  }

  char *fname = argv[1];
  char entry[df_MAX_LINE_LENGTH];
  
  DiskFileB infile(fname);
  if(!infile) {
    cout &lt;&lt; "Cannot open the " &lt;&lt; fname &lt;&lt; " file" &lt;&lt; "\n";
    return 1;
  }
        
  while(!infile.df_EOF()) {
    if(infile.df_GetLine(entry, df_MAX_LINE_LENGTH, '\n', 1) != 
       DiskFileB::df_NO_ERROR) {
      break; <FONT COLOR="#ff0000">// Error reading from the disk file</FONT>
    }
    if(strcmp(entry, "") == 0) continue;
    char service[df_MAX_LINE_LENGTH];
    int port;
    char protocol[df_MAX_LINE_LENGTH];
    char aliases[df_MAX_LINE_LENGTH];
    char comment[df_MAX_LINE_LENGTH];
    if(ParseServiceFileEntry(entry, service, &amp;port, 
			     protocol, aliases, comment)) {
      cout &lt;&lt; "\n";
      if(service[0] != 0) 
	cout &lt;&lt; "Name:     " &lt;&lt; service &lt;&lt; "\n";
      if(protocol[0] != 0) 
	cout &lt;&lt; "Protocol: " &lt;&lt; protocol &lt;&lt; "\n";
      if(port &gt; 0) 
	cout &lt;&lt; "Port:     " &lt;&lt; port &lt;&lt; "\n";
      if(aliases[0] != 0) 
	cout &lt;&lt; "Aliases:  " &lt;&lt; aliases &lt;&lt; "\n";
      if(comment[0] != 0) 
	cout &lt;&lt; "Comment:  " &lt;&lt; comment &lt;&lt; "\n";
    }
  }
  infile.df_Close();

  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>

</BODY>
</HTML>
