<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> MultithreadServerExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: server.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 04/28/2000</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program used demonstrate the use of the gxSocket
class in a multi-threaded application.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //   </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include "m_thread.h"

class ConsoleThread : public gxThread
{
public:
  ConsoleThread() { }
  ~ConsoleThread() { }

private:
  void *ThreadEntryRoutine(gxThread_t *thread);
};

void *ConsoleThread::ThreadEntryRoutine(gxThread_t *thread)
{
  const int cmd_len = 255;
  char sbuf[cmd_len];
  
  while(1) {
    for(int i = 0; i &lt; cmd_len; i++) sbuf[i] = 0;
    cin &gt;&gt; sbuf;
    if(strcmp(sbuf, "quit") == 0) break;
    if(strcmp(sbuf, "exit") == 0) break;
    cout &lt;&lt; "Invalid command" &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "Enter quit to exit" &lt;&lt; "\n" &lt;&lt; flush;
  }
  return (void *)0;
}

int main(int argc, char **argv)
{
  <FONT COLOR="#ff0000">// Check arguments. Should be only one: the port number to bind to.</FONT>
  if(argc != 2) {
    cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " port" &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  ServerThread server;
  servercfg-&gt;port = (gxsPort_t) atoi(argv[1]);

  cout &lt;&lt; "Initializing server..." &lt;&lt; "\n" &lt;&lt; flush;
  int rv = server.InitServer(servercfg-&gt;port);
  if(rv != 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  <FONT COLOR="#ff0000">// Get the host name assigned to this machine</FONT>
  char hostname[gxsMAX_NAME_LEN];
  rv = server.GetHostName(hostname);
  if(rv != 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  cout &lt;&lt; "Opening multi-threaded server on host " &lt;&lt; hostname &lt;&lt; "\n" 
       &lt;&lt; flush;
  cout &lt;&lt; "Enter quit to exit" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "\n" &lt;&lt; flush;
  
  cout &lt;&lt; "Listening on port " &lt;&lt; servercfg-&gt;port &lt;&lt; "\n" &lt;&lt; flush;
  cout.flush();

 gxThread_t *server_thread = server.CreateThread();
  if(server_thread-&gt;GetThreadError() != gxTHREAD_NO_ERROR) {
    cout &lt;&lt; server_thread-&gt;ThreadExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  
  ConsoleThread console;
  gxThread_t *console_thread = console.CreateThread();
  if(console_thread-&gt;GetThreadError() != gxTHREAD_NO_ERROR) {
    cout &lt;&lt; console_thread-&gt;ThreadExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
    
  if(console.JoinThread(console_thread) != 0) {
    cout &lt;&lt; "Could not join the console thread" &lt;&lt; "\n" &lt;&lt; flush;
  }

  cout &lt;&lt; "Stopping the server thread..." &lt;&lt; "\n" &lt;&lt; flush;
  servercfg-&gt;accept_clients = 0;
  servercfg-&gt;echo_loop = 0;

  <FONT COLOR="#ff0000">// Cannot the server thread due to the blocking accept() function, so</FONT>
  <FONT COLOR="#ff0000">// cancel the thread before it is destroyed</FONT>
  server.CancelThread(server_thread);
  if(server_thread-&gt;GetThreadState() == gxTHREAD_STATE_CANCELED) {
    cout &lt;&lt; "The server thread was stopped" &lt;&lt; "\n" &lt;&lt; flush;
  }
  else {
    cout &lt;&lt; "Could not canel the server thread" &lt;&lt; "\n" &lt;&lt; flush;
  }

  if(server.JoinThread(server_thread) != 0) {
    cout &lt;&lt; "Could not join the server thread" &lt;&lt; "\n" &lt;&lt; flush;
  }
    
  delete server_thread;
  delete console_thread;

  cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>


  


</PRE></FONT>

</BODY>
</HTML>
