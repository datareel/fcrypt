<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> SerialCommRecvExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: server.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

The program is used to test gxSerialComm class receive
functions by reading characters from a serial port.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
#include "gxscomm.h"
#include "dfileb.h"

<FONT COLOR="#ff0000">// Pauses for a specified number of milliseconds. </FONT>
inline void MSleep(clock_t wait)
{
  clock_t goal;
  goal = wait + clock();
  while(goal &gt; clock()) ;
}

void SerialRead(gxSerialComm *dev, char *dumpfile = 0)
{
  DiskFileB outfile;
  if(dumpfile) {
    cout &lt;&lt; "Writing output to the " &lt;&lt; dumpfile &lt;&lt; " file" &lt;&lt; "\n" &lt;&lt; flush; 
    outfile.df_Create(dumpfile);
    if(!outfile) {
      cout &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "Cannot open the: " &lt;&lt; dumpfile &lt;&lt; " capture file"
	   &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "\n" &lt;&lt; flush;
      return;
    }
  }

  cout &lt;&lt; "Waiting to receive..." &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Press Ctrl C to terminate." &lt;&lt; "\n" &lt;&lt; flush;

  const int rxBufferLen = 255;
  char buf[rxBufferLen];

  <FONT COLOR="#ff0000">// Loop while waiting for input</FONT>
  while(1) {
    MSleep(100); <FONT COLOR="#ff0000">// Allow for I/O recovery time </FONT>
    dev-&gt;RawRead((char *)buf, rxBufferLen);
    if(dev-&gt;BytesRead() &gt; 0) {
      buf[dev-&gt;BytesRead()] = 0; <FONT COLOR="#ff0000">// Null terminate the string</FONT>
      if(dumpfile) { <FONT COLOR="#ff0000">// Capture data to a file</FONT>
	outfile.df_Write((char *)buf, dev-&gt;BytesRead());
	outfile.df_Flush();
      }
      else { <FONT COLOR="#ff0000">// Write the data to the console</FONT>
	cout &lt;&lt; buf &lt;&lt; flush;
      }
    }
  }
}

int main(int argc, char **argv)
{
  if(argc &lt; 2) {
    cout &lt;&lt; "Serial port receive program" &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "Usage 1: " &lt;&lt; argv[0] &lt;&lt; " device name [baud rate]" &lt;&lt; "\n" 
	 &lt;&lt; flush;
    cout &lt;&lt; "Usage 2: " &lt;&lt; argv[0] &lt;&lt; " device name baud rate capture file"
	 &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  gxSerialComm dev;
  
  int status = dev.OpenSerialPort(argv[1]);
  if( status &lt; 0) {
    cout &lt;&lt; "Cannot open the specified device!" &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  else {
    if(status == gxSerialComm::scommREAD_WRITE)
      cout &lt;&lt; argv[1] &lt;&lt; " open for read/write access." &lt;&lt; "\n" &lt;&lt; flush;
    else if(status == gxSerialComm::scommREAD_ONLY)
      cout &lt;&lt; argv[1] &lt;&lt; " open for read only access." &lt;&lt; "\n" &lt;&lt; flush;
    else if(status == gxSerialComm::scommWRITE_ONLY)
      cout &lt;&lt; argv[1] &lt;&lt; " open for write only access." &lt;&lt; "\n" &lt;&lt; flush;
    else {
      cout &lt;&lt; "Invalid status opening " &lt;&lt; argv[1] &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
      return 1;
    }
  }
  
  if(argc &gt; 2 &amp;&amp; atoi(argv[2])) dev.SetBaudRate(atoi(argv[2]));
  else dev.SetBaudRate(9600);
  
  <FONT COLOR="#ff0000">// dev.SetFlowControl(gxSerialComm::scommNO_FLOW_CONTROL);</FONT>
  <FONT COLOR="#ff0000">// dev.SetFlowControl(gxSerialComm::scommHARD_FLOW);</FONT>
  dev.SetFlowControl(gxSerialComm::scommSOFT_FLOW);
  <FONT COLOR="#ff0000">// dev.SetFlowControl(gxSerialComm::scommXON_XOFF);</FONT>
  
  dev.SetCharacterSize(8);
  dev.SetParity('N');
  dev.SetStopBits(1);
  dev.BinaryMode();
  
  if(dev.InitSerialPort() &lt; 0) {
    cout &lt;&lt; "Cannot initialize the specified device!" &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
      
  if(status == gxSerialComm::scommWRITE_ONLY) {
    cout &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; argv[1] &lt;&lt; " is open for write only access." &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "You do not have permission to read from this device!" &lt;&lt; "\n" 
	 &lt;&lt; flush;
    cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  if(argc &gt; 3)
    SerialRead(&amp;dev, argv[3]); <FONT COLOR="#ff0000">// Write received characters to specified file</FONT>
  else 
    SerialRead(&amp;dev);

  dev.Close();
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>

</BODY>
</HTML>
