<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> DatagramServerExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: server.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Simple datagram server demo using the gxSocket class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include "gxsocket.h"

int main(int argc, char **argv)
{
  <FONT COLOR="#ff0000">// Check arguments. Should be only one: the port number to bind to.</FONT>
  if(argc != 2) {
    cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " port" &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  unsigned short port = (unsigned short) atoi(argv[1]);

  cout &lt;&lt; "Construcing datagram server..." &lt;&lt; "\n" &lt;&lt; flush;
  gxSocket server(SOCK_DGRAM, port);
  if(!server) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  
  <FONT COLOR="#ff0000">// Get the host name assigned to this machine (statistical info only)</FONT>
  char hostname[gxsMAX_NAME_LEN];
  int rv = server.GetHostName(hostname);
  if(rv &lt; 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  cout &lt;&lt; "Opening stream server on host " &lt;&lt; hostname &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Listening on port " &lt;&lt; port &lt;&lt; "\n" &lt;&lt; flush;

  <FONT COLOR="#ff0000">// Bind the name to the socket</FONT>
  rv = server.Bind();
  if(rv &lt; 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
 
  const int buf_len = 255; <FONT COLOR="#ff0000">// Receive buffer size</FONT>
  char sbuf[buf_len];
  <FONT COLOR="#ff0000">// Block until the client sends some data</FONT>
  rv = server.RemoteRawReadFrom(sbuf, buf_len);
  if(rv &lt; 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  
  <FONT COLOR="#ff0000">// Get the client info (statistical info only)</FONT>
  char client_name[gxsMAX_NAME_LEN]; int r_port = -1;
  server.GetClientInfo(client_name, r_port);
  cout &lt;&lt; "Receiving data from " &lt;&lt; client_name 
       &lt;&lt; " remote port " &lt;&lt; r_port &lt;&lt; "\n" &lt;&lt; flush;

  cout &lt;&lt; "Received " &lt;&lt; rv &lt;&lt; " bytes" &lt;&lt; "\n" &lt;&lt; flush;

  <FONT COLOR="#ff0000">// Print the buffer contents to the stdout for visual conformation</FONT>
  sbuf[rv] = 0; <FONT COLOR="#ff0000">// Null terminate the buffer</FONT>
  cout &lt;&lt; sbuf;

  cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
  server.Close(); <FONT COLOR="#ff0000">// Close the socket connection</FONT>
  server.ReleaseSocketLibrary();
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>

</BODY>
</HTML>
