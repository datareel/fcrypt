<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> PingScanExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: pingscan.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program demonstrating how to build network-monitoring 
utilities using the GX Socket library. This example tests for connectivity 
using the embedded ping library and reports hostname information. This 
program and any derivatives are solely intended to test connectivity for 
informational and statistical purposes on systems you are authorized to 
access.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;stdio.h&gt;
#include "gxsping.h"
#include "gxip32.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

int GetHostInfo(const char *hostname)
{
  gxSocket sock_lib;
  if(sock_lib.InitSocketLibrary() != 0) {
    cout &lt;&lt; sock_lib.SocketExceptionMessage() &lt;&lt; "\n";
    return 0;
  }

  gxsInternetAddress *ialist;
  gxsHostNameInfo *hostnm = sock_lib.GetHostInformation((char *)hostname);

  if(!hostnm) return 0;

  cout &lt;&lt; "Hostname: " &lt;&lt; hostnm-&gt;h_name &lt;&lt; "\n";

  int i;
  for(i = 0; ; i++) {
    char *alias = hostnm-&gt;h_aliases[i];
    if(alias == 0) break;
    cout &lt;&lt; "Host Alias: " &lt;&lt; alias &lt;&lt; "\n"; 
  }

  for(i = 0; ; i++) {
    ialist = (gxsInternetAddress *)hostnm-&gt;h_addr_list[i];
    if(ialist == 0) break;
    cout &lt;&lt; "Host IP Address: " &lt;&lt; inet_ntoa(*ialist) &lt;&lt; "\n";
  }
  delete hostnm;
  return 1;
}

int PingHost(const char *hostname, int *status)
{
  <FONT COLOR="#ff0000">// Construct a raw socket;</FONT>
  gxSocket raw_socket(AF_INET, SOCK_RAW, IPPROTO_ICMP, 0, 
		      (char *)hostname);
  if(!raw_socket) {
    cout &lt;&lt; raw_socket.SocketExceptionMessage() &lt;&lt; "\n";
    return 0;
  }

  gxsPing ping(&amp;raw_socket);

  <FONT COLOR="#ff0000">// Ping with a timeout value of one second</FONT>
  if(ping.Ping(1) != gxSOCKET_NO_ERROR) {
    if(raw_socket.GetSocketError() == gxSOCKET_REQUEST_TIMEOUT) {
      *status = 0; <FONT COLOR="#ff0000">// This host is not responding</FONT>
      return 1; 
    }
    cout &lt;&lt; raw_socket.SocketExceptionMessage() &lt;&lt; "\n";
    return 0;
  }

  return *status = 1;
}

int main(int argc, char **argv)
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif
  
#ifdef __UNIX__
  <FONT COLOR="#ff0000">// Raw sockets require root access on all UNIX platforms. Programs</FONT>
  <FONT COLOR="#ff0000">// that use raw sockets can be executed by non-root users if the</FONT>
  <FONT COLOR="#ff0000">// effective user ID of the executing process is set to the same as</FONT>
  <FONT COLOR="#ff0000">// the file's owner. In the case root must own the executable and</FONT>
  <FONT COLOR="#ff0000">// the effective User-ID or Group-ID on execution bit must be set</FONT>
  <FONT COLOR="#ff0000">// by root using the chmod command: "chmod u+s" or "chmod 4755"</FONT>
  <FONT COLOR="#ff0000">// Now the effective user ID of the executing process will be set to </FONT>
  <FONT COLOR="#ff0000">// the same user ID of the file's owner. </FONT>
  if(geteuid() != 0) {
    cout &lt;&lt; "You must be root to run this program" &lt;&lt; "\n";
    return 0;
  }
#endif

  <FONT COLOR="#ff0000">// Check the command line arguments</FONT>
  if(argc != 2) {
    cout &lt;&lt; "\n";
    cout &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " class C subnet" &lt;&lt; "\n";
    cout &lt;&lt; "Example: " &lt;&lt; argv[0] &lt;&lt; " 192.168.0" &lt;&lt; "\n";
    return 1;
  }

  gxIP32 sub_net_address(argv[1]);

  if((sub_net_address.GetByte1() == 0) || (sub_net_address.GetByte2() == 0) ||
     (sub_net_address.GetByte3() == 0)) {
    cout &lt;&lt; argv[1] &lt;&lt; " is not a class C address" &lt;&lt; "\n";
    return 1;
  }

  sub_net_address.SetByte4((unsigned char)255);
  char sbuf[ip32MaxStrLen];
  cout &lt;&lt; "Exploring the " &lt;&lt; sub_net_address.c_str(sbuf) &lt;&lt; " subnet" &lt;&lt; "\n";

  for(int i = 1; i &lt; 255; i++) {
    sub_net_address.SetByte4((unsigned char)i);
    cout &lt;&lt; "\n";
    cout &lt;&lt; "Contacting host: " &lt;&lt; sub_net_address.c_str(sbuf) &lt;&lt; "\n";

    int has_dns_entry = GetHostInfo(sub_net_address.c_str(sbuf));
    int status;
    if(!PingHost(sub_net_address.c_str(sbuf), &amp;status)) return 1;
    if(status == 0) {
      if(has_dns_entry) {
	cout &lt;&lt; "Host not responding." &lt;&lt; "\n";
      }
      else {
	cout &lt;&lt; "Host does not exist." &lt;&lt; "\n";
      }
    }
    else {
      if(!has_dns_entry) {
	cout &lt;&lt; "Host name: Cannot resolve host name" &lt;&lt; "\n";
	cout &lt;&lt; "Host IP Address: " &lt;&lt; sub_net_address.c_str(sbuf) &lt;&lt; "\n";
      }
    }
  }

  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>

</BODY>
</HTML>
