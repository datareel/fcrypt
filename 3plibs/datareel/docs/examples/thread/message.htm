<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> ThreadMessageExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 03/25/2000</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or 
modify it under the terms of the GNU Lesser General Public 
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. 
  
This library is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
USA
 
Simple test program demonstrating the gxThread status and error
message functions for gxThread_t types.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //   </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;stdlib.h&gt;
#include "gxthread.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

<FONT COLOR="#ff0000">// Constants</FONT>
const int THREAD_EXIT_CODE = 15; <FONT COLOR="#ff0000">// Arbitrary exit code value</FONT>

void PrintThreadStatus(gxThread_t *thread)
{
  cout &lt;&lt; "Thread OID: " &lt;&lt; (int)thread-&gt;GetObjectID() &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Thread CID: " &lt;&lt; (int)thread-&gt;GetClassID() &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; thread-&gt;ThreadExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; thread-&gt;ThreadPriorityMessage() &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; thread-&gt;ThreadStateMessage() &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; thread-&gt;ThreadTypeMessage() &lt;&lt; "\n" &lt;&lt; flush;
  if(thread-&gt;GetStackSize() &gt; (gxStackSizeType)0)
    cout &lt;&lt; "Stack size: " &lt;&lt; (int)thread-&gt;GetStackSize() &lt;&lt; "\n" &lt;&lt; flush;
  if(thread-&gt;GetThreadExitCode() == (gxThreadExitCode)THREAD_EXIT_CODE)
    cout &lt;&lt; "Exit code: " &lt;&lt; (int)thread-&gt;GetThreadExitCode() &lt;&lt; "\n" &lt;&lt; flush;
}

class SimpleThread : public gxThread
{
public:
  SimpleThread() { cid = 1500; oid = 0; }
  ~SimpleThread() { }
  
private: <FONT COLOR="#ff0000">// Base class interface</FONT>
  void *ThreadEntryRoutine(gxThread_t *thread);
  void ThreadExitRoutine(gxThread_t *thread);

private:
  gxThreadObjectID oid;
  gxThreadClassID cid;
};

void *SimpleThread::ThreadEntryRoutine(gxThread_t *thread)
{
  thread-&gt;SetClassID(cid);
  thread-&gt;SetObjectID(oid++);
  PrintThreadStatus(thread);  
  sSleep(1);
  return (void *)THREAD_EXIT_CODE;
}

void SimpleThread::ThreadExitRoutine(gxThread_t *thread)
{
  cout &lt;&lt; "\n" &lt;&lt; flush;
  PrintThreadStatus(thread);  
  cout &lt;&lt; "\n" &lt;&lt; flush;
}

<FONT COLOR="#ff0000">// Main thread of execution</FONT>
int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  SimpleThread t;

  const int NUM_THREADS = 10;
  gxThread_t *thread[NUM_THREADS];

  int i;
  for(i = 0; i &lt; NUM_THREADS; i++) {
    thread[i] = t.CreateThread();

    <FONT COLOR="#ff0000">// Check for any errors created during thread creation</FONT>
    if(thread[i]-&gt;GetThreadError() != 0) {
      cout &lt;&lt; thread[i]-&gt;ThreadExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    }

    t.sSleep(3);
  }

  <FONT COLOR="#ff0000">// Wait for all the threads to finish before exiting</FONT>
  for(i = 0; i &lt; NUM_THREADS; i++) t.JoinThread(thread[i]);
  

  <FONT COLOR="#ff0000">// Cleanup all the gxThread_t pointers</FONT>
  for(i = 0; i &lt; NUM_THREADS; i++) {
    int rv = t.DestroyThread(thread[i]);
    if(rv != 0) {
      cout &lt;&lt; "Error destroying thread!" &lt;&lt; "\n" &lt;&lt; flush;
    }
  }

  return 0; <FONT COLOR="#ff0000">// Exit the process</FONT>
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>


  


</PRE></FONT>

</BODY>
</HTML>
