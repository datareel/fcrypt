<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> ThreadMutex1Example </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 03/25/2000</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or 
modify it under the terms of the GNU Lesser General Public 
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. 
  
This library is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
USA
 
gxMutex example program demonstrating how to protect access to
shared data.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //   </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "gxthread.h"
#include "gxmutex.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

<FONT COLOR="#ff0000">// Constants</FONT>
const int NUMTHREADS = 3;

<FONT COLOR="#ff0000">// Mutex that will be shared by threads within this process</FONT>
gxMutex mutex;

<FONT COLOR="#ff0000">// Shared data</FONT>
int sharedData1 = 0;
int sharedData2 = 0;

class SimpleThread : public gxThread
{
public:
  SimpleThread() { }
  ~SimpleThread();
  
public:
  void Begin();
  void End();
  
private: <FONT COLOR="#ff0000">// Base class interface</FONT>
  void *ThreadEntryRoutine(gxThread_t *thread);

public:
  gxThread_t *t[NUMTHREADS];
};

void *SimpleThread::ThreadEntryRoutine(gxThread_t *thread)
{
  cout &lt;&lt; "Entering thread" &lt;&lt; "\n" &lt;&lt; flush;
  mutex.MutexLock();
  
  <FONT COLOR="#ff0000">//********** Critical Section *******************//</FONT>
  cout &lt;&lt; "Start critical section, holding lock" &lt;&lt; "\n" &lt;&lt; flush;

  <FONT COLOR="#ff0000">// Access to shared data goes here </FONT>
  ++sharedData1; --sharedData2;
  cout &lt;&lt; "sharedData1 = " &lt;&lt; sharedData1 &lt;&lt; ", sharedData2 = " &lt;&lt; sharedData2
       &lt;&lt; "\n" &lt;&lt; flush;
  
  cout &lt;&lt; "End critical section, release lock" &lt;&lt; "\n" &lt;&lt; flush;
  <FONT COLOR="#ff0000">//********** Critical Section *******************//</FONT>

  mutex.MutexUnlock();
  return 0;
}

void SimpleThread::Begin()
{
  for(int i = 0; i &lt; NUMTHREADS; ++i) t[i] = CreateThread();
}

void SimpleThread::End()
{
  for(int i = 0; i &lt; NUMTHREADS; ++i) JoinThread(t[i]);
}

SimpleThread::~SimpleThread()
{
  for(int i = 0; i &lt; NUMTHREADS; ++i) {
    if(t[i]) delete t[i];
  }
}

int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  SimpleThread t;
  
  cout &lt;&lt; "Hold Mutex to prevent access to shared data" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "sharedData1 = " &lt;&lt; sharedData1 &lt;&lt; ", sharedData2 = " &lt;&lt; sharedData2
       &lt;&lt; "\n" &lt;&lt; flush;
  
  mutex.MutexLock();
 
  cout &lt;&lt; "Create/start threads" &lt;&lt; "\n" &lt;&lt; flush;
  t.Begin();
  
  cout &lt;&lt; "Wait a until we are done with the shared data" &lt;&lt; "\n" &lt;&lt; flush;
  t.sSleep(3);

  cout &lt;&lt; "Unlock shared data" &lt;&lt; "\n" &lt;&lt; flush;
  mutex.MutexUnlock();

  cout &lt;&lt; "Wait for the threads to complete, and release their resources"
       &lt;&lt; "\n" &lt;&lt; flush;
  t.End();
  
  return 0; <FONT COLOR="#ff0000">// Exit the process</FONT>
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

 

</PRE></FONT>

</BODY>
</HTML>
