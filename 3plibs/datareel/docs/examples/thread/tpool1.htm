<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> ThreadPool1Example </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 03/25/2000</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or 
modify it under the terms of the GNU Lesser General Public 
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. 
  
This library is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
USA

Test program used to the basic functionality of the Thread Pool
class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //   </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "thrpool.h"
#include "gthreadt.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

void PausePrg()
<FONT COLOR="#ff0000">// Pause the program and wait for the user to press enter.</FONT>
{
  <FONT COLOR="#ff0000">// Pause the program until enter is pressed</FONT>
  cout &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Press Enter to continue..." &lt;&lt; "\n" &lt;&lt; flush;
  cin.get();
}

void ScrollForward(thrPool &amp;pool)
{
  cout &lt;&lt; "Walking through the pool..." &lt;&lt; "\n" &lt;&lt; flush;
  thrPoolNode *ptr = pool.GetHead();
  while(ptr) {
    cout &lt;&lt; (char)ptr-&gt;GetThreadPtr()-&gt;GetObjectID() &lt;&lt; ' ';
    ptr = ptr-&gt;GetNext();
  } 
  cout &lt;&lt; "\n" &lt;&lt; flush;
}

void RewindPool(thrPool &amp;pool)
{
  cout &lt;&lt; "Walking through the pool in a backward direction..." 
       &lt;&lt; "\n" &lt;&lt; flush;
  thrPoolNode *ptr = pool.GetTail();

  <FONT COLOR="#ff0000">// Walk through the pool in a backward direction</FONT>
  while(ptr) {
    cout &lt;&lt; (char)ptr-&gt;GetThreadPtr()-&gt;GetObjectID() &lt;&lt; ' ';
    ptr = ptr-&gt;GetPrev();
  } 

  cout &lt;&lt; "\n" &lt;&lt; flush;
}

int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  thrPool pool;
  thrPoolNode *ptr;

  cout &lt;&lt; "Loading data elements into the pool..." &lt;&lt; "\n" &lt;&lt; flush;
  thrPoolNode *na = new thrPoolNode;
  thrPoolNode *nb = new thrPoolNode;
  thrPoolNode *nc = new thrPoolNode;
  thrPoolNode *nd = new thrPoolNode;
  thrPoolNode *n1 = new thrPoolNode;
  thrPoolNode *n2 = new thrPoolNode;
  thrPoolNode *n3 = new thrPoolNode;
  thrPoolNode *n4 = new thrPoolNode;

  <FONT COLOR="#ff0000">// Allocating some memory buffers</FONT>
  const unsigned num_blocks = 9;
  gxThread_t *buf[num_blocks];
  unsigned i;
  for(i = 0; i &lt; num_blocks; i++) {
    buf[i] = new gxThread_t;
    <FONT COLOR="#ff0000">// Set an arbitary object ID stating starting with ASCII character 'A'</FONT>
    buf[i]-&gt;SetObjectID(65+i);
  }
  
  na-&gt;SetThreadPtr(buf[0]);
  nb-&gt;SetThreadPtr(buf[1]);
  nc-&gt;SetThreadPtr(buf[2]);
  nd-&gt;SetThreadPtr(buf[3]);

  <FONT COLOR="#ff0000">// Load some pool elements</FONT>
  pool.InsertAfter(pool.GetHead(), na);
  pool.InsertAfter(na, nb);
  pool.InsertAfter(nb, nc);
  pool.InsertAfter(nc, nd);
  
  n1-&gt;SetThreadPtr(buf[4]);
  n2-&gt;SetThreadPtr(buf[5]);
  n3-&gt;SetThreadPtr(buf[6]);
  n4-&gt;SetThreadPtr(buf[7]);
  
  <FONT COLOR="#ff0000">// Testing insert functions</FONT>
  pool.InsertBefore(na, n1);
  pool.InsertBefore(nc, n2);
  pool.InsertAfter(nb, n3);
  pool.InsertAfter(nd, n4);

  <FONT COLOR="#ff0000">// Reordering the pool</FONT>
  pool.MoveToBack(na);
  pool.MoveAfter(na, nc);
  pool.MoveBefore(nc, nb);
  pool.MoveAfter(nc, nd);
  pool.MoveAfter(nd, n2);
  pool.MoveBefore(n2, n1);
  pool.MoveAfter(n2, n3);
  pool.MoveAfter(n3, n4);
  
  ScrollForward(pool);
  RewindPool(pool);

  PausePrg();

  cout &lt;&lt; "Adding another item to the pool..." &lt;&lt; "\n" &lt;&lt; flush;
  ptr = pool.AddThread(buf[8]);
  ScrollForward(pool);

  PausePrg();

  cout &lt;&lt; "Moving pool item to the front of the pool" &lt;&lt; "\n" &lt;&lt; flush;
  pool.MoveToFront(ptr);
  ScrollForward(pool);

  cout &lt;&lt; "Moving item to the back of the pool..." &lt;&lt; "\n" &lt;&lt; flush;
  pool.MoveToBack(ptr);
  ScrollForward(pool);
  
  PausePrg();
  
  cout &lt;&lt; "Removing the head of the pool..." &lt;&lt; "\n" &lt;&lt; flush;
  ptr = pool.GetHead();
  gxThread_t *tptr = pool.RemoveNode(ptr);
  if(tptr) delete tptr; <FONT COLOR="#ff0000">// Prevent memory leaks</FONT>
  ScrollForward(pool);

  cout &lt;&lt; "Removing the tail of the pool..." &lt;&lt; "\n" &lt;&lt; flush;
  ptr = pool.GetTail();
  tptr = pool.RemoveNode(ptr);
  if(tptr) delete tptr; <FONT COLOR="#ff0000">// Prevent memory leaks</FONT>
  ScrollForward(pool);

  PausePrg();
  cout &lt;&lt; "Testing for memory leaks..." &lt;&lt; "\n" &lt;&lt; flush;
  unsigned len = sizeof(gxThread_t);
  const unsigned num_to_allocate = 1000; <FONT COLOR="#ff0000">// 1000 * 1000;</FONT>
  const unsigned mem_bufs = (sizeof(thrPoolNode) + len) * num_to_allocate;
  cout &lt;&lt; "Allocating " &lt;&lt; mem_bufs &lt;&lt; " bytes..." &lt;&lt; "\n" &lt;&lt; flush;

  <FONT COLOR="#ff0000">// Clear the thread pool without checking the status of each thread</FONT>
  pool.ClearPool();

  unsigned count1 = 0;
  unsigned count2 = 0;
  for(i = 0; i &lt; num_to_allocate; ++i) {
    gxThread_t *sbuf = new gxThread_t;
    count1 += sizeof(sbuf);
    if(!sbuf) {
      cout &lt;&lt; "Memory allocation error at " &lt;&lt; (count1+count2) &lt;&lt; " bytes"
	   &lt;&lt; "\n" &lt;&lt; flush;
      break;
    }
    
    count2 += sizeof(thrPoolNode);
    if(!pool.AddThread(sbuf))  {
      cout &lt;&lt; "Memory allocation error at " &lt;&lt; (count1+count2) &lt;&lt; " bytes"
	   &lt;&lt; "\n" &lt;&lt; flush;
      break;
    }
  }
  cout &lt;&lt; "Done" &lt;&lt; "\n" &lt;&lt; flush;
  PausePrg();

  cout &lt;&lt; "Releasing memory allocated back to the heap..." &lt;&lt; "\n" &lt;&lt; flush;

  while(!pool.IsEmpty()) {
    <FONT COLOR="#ff0000">// Clear the pool, giving the application a chance to check the</FONT>
    <FONT COLOR="#ff0000">// status of each thread.</FONT>
    gxThread_t *t = pool.RemoveTail();
    if(t) {
      <FONT COLOR="#ff0000">// Process the thread and release any memory the thread is holding</FONT>
      <FONT COLOR="#ff0000">// ...</FONT>
      delete t;
    }
  }
  pool.MakeEmpty(); <FONT COLOR="#ff0000">// The thread pool is no empty</FONT>
  
  PausePrg();
  
  cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "\n" &lt;&lt; flush;
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>



</PRE></FONT>

</BODY>
</HTML>
