<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> ThreadSpecificExample </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 03/25/2000</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or 
modify it under the terms of the GNU Lesser General Public 
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. 
  
This library is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
USA

Test program demonstrating how to create thread-specific data. 
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //   </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "gxthread.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

<FONT COLOR="#ff0000">// Constants</FONT>
const int NUM_THREADS = 2;
 
<FONT COLOR="#ff0000">// Thread specific data used in this process</FONT>
struct threadSpecific_data_t
{
  threadSpecific_data_t(int i, int j) {
    threadSpecific1 = i; threadSpecific2 = j; 
  }
  
  int threadSpecific1;
  int threadSpecific2;
};

<FONT COLOR="#ff0000">// Thread key</FONT>
gxThreadKey threadSpecificKey;

class SimpleThread : public gxThread
{
public:
  SimpleThread () { oid = 1; }
  
private: <FONT COLOR="#ff0000">// Base class interface</FONT>
  void *ThreadEntryRoutine(gxThread_t *thread);
  void ThreadExitRoutine(gxThread_t *thread);
  
private: <FONT COLOR="#ff0000">// Functions that use the threadSpecific data</FONT>
  void foo(gxThread_t *thread);  
  void bar(gxThread_t *thread);

private:
  gxThreadObjectID oid;
};

void *SimpleThread::ThreadEntryRoutine(gxThread_t *thread)
<FONT COLOR="#ff0000">// Thread's entry function</FONT>
{
  thread-&gt;SetObjectID(oid++);
  cout &lt;&lt; "Entering thread: " &lt;&lt; thread-&gt;GetObjectID() &lt;&lt; "\n" &lt;&lt; flush;
  
  threadSpecific_data_t *gData = \
    (threadSpecific_data_t *)thread-&gt;GetThreadParm();

  if(ThreadSetSpecific(threadSpecificKey, gData) != 0) {
    cout &lt;&lt; "Thread local storage error" &lt;&lt; "\n" &lt;&lt; flush;
    return ExitThread(thread, 1);
  }
  
  foo(thread);
  return 0;
}
 
void SimpleThread::foo(gxThread_t *thread)
{
  threadSpecific_data_t *gData = \
    (threadSpecific_data_t *)ThreadGetSpecific(threadSpecificKey);

  cout &lt;&lt; "Thread: " &lt;&lt; thread-&gt;GetObjectID() &lt;&lt; " entering foo(), ";
  cout &lt;&lt; "threadSpecific data = " &lt;&lt; gData-&gt;threadSpecific1 &lt;&lt; ' '
       &lt;&lt; gData-&gt;threadSpecific2
       &lt;&lt; "\n" &lt;&lt; flush;

  bar(thread);
}
 
void SimpleThread::bar(gxThread_t *thread)
{
  threadSpecific_data_t *gData = \
    (threadSpecific_data_t *)ThreadGetSpecific(threadSpecificKey);
  
  cout &lt;&lt; "Thread: " &lt;&lt; thread-&gt;GetObjectID() &lt;&lt; " entering bar(), ";
  cout &lt;&lt; "threadSpecific data = " &lt;&lt; gData-&gt;threadSpecific1 &lt;&lt; ' '
       &lt;&lt; gData-&gt;threadSpecific2
       &lt;&lt; "\n" &lt;&lt; flush;
}
 
void SimpleThread::ThreadExitRoutine(gxThread_t *thread)
{
  cout &lt;&lt; "Thread: " &lt;&lt; thread-&gt;GetObjectID() &lt;&lt; " exiting" &lt;&lt; "\n" &lt;&lt; flush;

  void *parm = thread-&gt;GetThreadParm();

  <FONT COLOR="#ff0000">// Free the local storage resources</FONT>
  delete parm;
}
 
int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  SimpleThread t;
  gxThread_t *thread[NUM_THREADS];

  if(t.ThreadKeyCreate(threadSpecificKey) != 0) {
    cout &lt;&lt; "Thread local storage error!" &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "Could not obtain and index." &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  cout &lt;&lt; "Creating " &lt;&lt; NUM_THREADS &lt;&lt; " threads" &lt;&lt; "\n" &lt;&lt; flush;
  int i;
  for(i = 0; i &lt; NUM_THREADS; i++) {
    <FONT COLOR="#ff0000">// Create per-thread threadSpecific data and pass it to the thread</FONT>
    threadSpecific_data_t *gData = new threadSpecific_data_t(i, ((i+1)*2));
    thread[i] = t.CreateThread((void *)gData);
    t.sSleep(1); <FONT COLOR="#ff0000">// Allow the thread to print their messages in order</FONT>
  }
 
  cout &lt;&lt; "Wait for the threads to complete, and release their resources"
       &lt;&lt; "\n" &lt;&lt; flush;
  for(i = 0; i &lt; NUM_THREADS; i++) t.JoinThread(thread[i]);

  <FONT COLOR="#ff0000">// Release the index</FONT>
  t.ThreadKeyDelete(threadSpecificKey);

  <FONT COLOR="#ff0000">// Prevent memory leaks</FONT>
  for(i = 0; i &lt; NUM_THREADS; i++) delete thread[i];
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>

</BODY>
</HTML>
