<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> ThreadPrio2Example </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 03/25/2000</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or 
modify it under the terms of the GNU Lesser General Public 
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. 
  
This library is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
USA
 
Test program demonstrating how to set thread priorities using the
within a thread pool.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //   </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "gxthread.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

class SimpleThread : public gxThread
{
private: <FONT COLOR="#ff0000">// Base class interface</FONT>
  void *ThreadEntryRoutine(gxThread_t *thread);
};

void *SimpleThread::ThreadEntryRoutine(gxThread_t *thread)
<FONT COLOR="#ff0000">// Thread's entry function</FONT>
{
  cout &lt;&lt; "Executing worker thread: " &lt;&lt; (int)thread-&gt;GetThreadParm() &lt;&lt; ", "
       &lt;&lt; thread-&gt;ThreadPriorityMessage() &lt;&lt; "\n" &lt;&lt; flush;
  return 0;
}

int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  const unsigned NUM_WORKERS = 10;

  SimpleThread *t = new SimpleThread;
  thrPool *pool = new thrPool;
  gxThread_t *thread[NUM_WORKERS];
  
  unsigned i;
  <FONT COLOR="#ff0000">// Construct some new threads without executing them</FONT>
  for(i = 0; i &lt; NUM_WORKERS; i++) thread[i] = t-&gt;ConstructThread((void *)i);

  <FONT COLOR="#ff0000">// Change some of the thread priorities before placing them in the pool</FONT>
  thread[NUM_WORKERS-1]-&gt;SetThreadPriority(gxTHREAD_PRIORITY_HIGH);
  thread[NUM_WORKERS-2]-&gt;SetThreadPriority(gxTHREAD_PRIORITY_HIGH);
  thread[NUM_WORKERS-3]-&gt;SetThreadPriority(gxTHREAD_PRIORITY_HIGH);

  thread[0]-&gt;SetThreadPriority(gxTHREAD_PRIORITY_LOW);
  thread[1]-&gt;SetThreadPriority(gxTHREAD_PRIORITY_LOW);
  thread[2]-&gt;SetThreadPriority(gxTHREAD_PRIORITY_LOW);

  <FONT COLOR="#ff0000">// Put the threads in the thread pool</FONT>
  for(i = 0; i &lt; NUM_WORKERS; i++) pool-&gt;AddThread(thread[i]);

  <FONT COLOR="#ff0000">// Execute all the threads in the pool</FONT>
  thrPoolNode *ptr = pool-&gt;GetHead();
  while(ptr) {
    t-&gt;CreateThread(ptr-&gt;GetThreadPtr());
    t-&gt;sSleep(1);
    ptr = ptr-&gt;GetNext();
  }

  <FONT COLOR="#ff0000">// Wait for the treads to finish before destroying the pool</FONT>
  t-&gt;JoinThread(pool);

  cout &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Destroying the thread pool..." &lt;&lt; "\n" &lt;&lt; flush;
  t-&gt;DestroyThreadPool(pool);

  cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;

  delete t;
  return 0; <FONT COLOR="#ff0000">// Exit the process, terminating all threads</FONT>
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>


  


</PRE></FONT>

</BODY>
</HTML>
