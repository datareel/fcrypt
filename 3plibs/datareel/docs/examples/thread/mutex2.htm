<!-- HTML file generated by: cpp2html version 4.42 -->
<!-- Copyright (c) 2001-2016 DataReel Software Development -->
<!-- For program info contact: https://github.com/datareel -->
<HTML>
<HEAD>
<TITLE> ThreadMutex2Example </TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF">
<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 03/25/2000</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2016 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or 
modify it under the terms of the GNU Lesser General Public 
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version. 
  
This library is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
USA
 
Mutex example used to show how corruption can result if no
serialization is done.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //   </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "gxthread.h"
#include "gxmutex.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

<FONT COLOR="#ff0000">// Constants</FONT>
const int LOOPCONSTANT = 100000;
const int NUM_THREADS = 10;

<FONT COLOR="#ff0000">// Mutex that will be shared by threads within this process </FONT>
gxMutex mutex;

<FONT COLOR="#ff0000">// Global variables</FONT>
int i, j, k, l;
int uselock = 1; <FONT COLOR="#ff0000">// TRUE if locking shared data</FONT>

class SimpleThread : public gxThread
{
public:
  SimpleThread() { }
  ~SimpleThread() { }
  
private: <FONT COLOR="#ff0000">// Base class interface</FONT>
  void *ThreadEntryRoutine(gxThread_t *thread);
};

void *SimpleThread::ThreadEntryRoutine(gxThread_t *thread)
{
  for(int loop=0; loop &lt; LOOPCONSTANT; ++loop) {
    if(uselock) { <FONT COLOR="#ff0000">// Lock critical section if uselock is true</FONT>
      if(mutex.MutexLock() != 0) {
	cout &lt;&lt; mutex.MutexExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
	return ExitThread(thread, 1);
      }
    }

    <FONT COLOR="#ff0000">// Shared data</FONT>
    ++i; ++j; ++k; ++l;

    if(uselock) {
      if(mutex.MutexUnlock() != 0) {
	cout &lt;&lt; mutex.MutexExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
	return ExitThread(thread, 1);
      }
    }
  }

  return 0;
}

int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  SimpleThread t;
  gxThread_t *thread[NUM_THREADS];
  int loop;
  
  cout &lt;&lt; "Creating " &lt;&lt; NUM_THREADS &lt;&lt; " threads" &lt;&lt; "\n" &lt;&lt; flush;
  for(loop = 0; loop &lt; NUM_THREADS; ++loop)
    thread[loop] = t.CreateThread();

  cout &lt;&lt; "Wait for results" &lt;&lt; "\n" &lt;&lt; flush;
  t.sSleep(10);

  cout &lt;&lt; "Show results" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Using " &lt;&lt; NUM_THREADS &lt;&lt; " threads and " &lt;&lt; LOOPCONSTANT
       &lt;&lt; " loop constant" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Values are: (should be " &lt;&lt; (NUM_THREADS * LOOPCONSTANT)
       &lt;&lt; ")" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "  ==&gt;" &lt;&lt; i &lt;&lt; ' ' &lt;&lt; j &lt;&lt; ' ' &lt;&lt; k &lt;&lt; ' ' &lt;&lt; l &lt;&lt; "\n" &lt;&lt; flush;
                             
  cout &lt;&lt; "Main thread completed" &lt;&lt; "\n" &lt;&lt; flush;

  <FONT COLOR="#ff0000">// Prevent memory leaks</FONT>
  for(loop = 0; loop &lt; NUM_THREADS; ++loop) delete thread[loop];

  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

 

</PRE></FONT>

</BODY>
</HTML>
